
openapi: "3.0.0"
info:
  description: |
    [AnnoFab](https://annofab.com) のWeb APIです。
    キャッシュが有効になって[大幅に高速化された v2 はこちら](/docs/api/v2) です。

    APIベースURL: https://annofab.com/api/v1<br>
    例） /projects というAPIを使う場合、 https://annofab.com/api/v1/projects をリクエストします。


    ■APIの変更ポリシー<br>
    **現在、APIは開発途上版です。予告なく互換性のない変更がある可能性をご了承ください。**
    ご要望の実現、あるいは、セキュリティやパフォーマンスの改善などを実現するにあたり、互換性のない変更が必要になる場合があります。
    その場合、開発途上版では開発リソースを改善に集中するため、古いバージョンを共存させずに互換性のない変更を行う場合があります。

    ■機能の要望や不具合報告 <br>
    「こんな機能が欲しい」というご要望や、「APIが予期せぬ動作をする」といった不具合報告などは、[こちらのお問い合わせフォーム](https://docs.google.com/forms/d/e/1FAIpQLSePryikS_wo_H11pxL2ewUe2d0ud0jxZlBQwH2rVVfcifKyQw/viewform)からご連絡ください。

    # API Client

    APIクライアントも提供しています。

    * https://github.com/kurusugawa-computer/annofab-cli
    * https://github.com/kurusugawa-computer/annofab-api-python-client

    # API Convention

    ## 用語

    * **属性○○○を必須**とは、「JSONに属性キー○○○を含め、かつ、その値が`null`以外」であること
    * **属性○○○を未指定**とは、「JSONに属性キー○○○を含めない」または「属性○○○のキーはあるが値は`null`」のどちらかであること

    ## 更新系APIのリクエストボディに必須の属性

    * 更新系APIとは、HTTPメソッドが **PUT** または **POST** のAPIです。
    * 更新系APIでは、更新対象の「リソースの最終更新日」を必須とする場合があります。
      * これは、複数ユーザーからのAPIリクエストのデータ競合を避けるための、一般的なAPI設計慣習によるものです。
      * ここで「リソースの最終更新日」とは、`last_updated_datetime` または `updated_datetime` という名前の属性です。
      * 一部のAPIでは、操作対象リソースと別のリソースの最終更新日を必要とします。
        その場合は、`last_***_update_datetime` のような名前です（***には別リソースが入ります）。
      * **新規作成のとき**は、リクエストボディの「リソースの最終更新日」を未指定にします。
        * リソースがすでに作成されているときは、新規作成リクエストは失敗します。
      * **存在するリソースを更新または削除するとき**は、リクエストボディの「リソースの最終更新日」に、そのリソースの現在の`updated_datetime`を指定します。
        * 更新しようとしたリソースが存在しないとき、またはすでに更新されているときは、更新リクエストは失敗します。
    * 「リソースの最終更新日」以外の属性については、新規作成/更新それぞれで必須が異なる場合、API個別に特筆されています。

    ## APIのリクエストボディに指定する _type 属性について

    * 一部のAPIではリクエストボディに `_type` 属性を任意で指定することができます。
    * `_type` 属性を指定する場合は、`_type` 属性で指定された型にデコードします。
      例えば、`_type` 属性に `ByDirectory` を指定すると `TaskGenerateRuleByDirectory` にデコードされ、`Poliline` を指定すると `InspectionDataPolyline` にデコードされます。
      リクエストボディが誤っている場合はエラーになります。
    * `_type` 属性を指定しない場合は、リクエストボディで指定された `_type` 以外の属性からデコードすべき型を推論します。適切な型が見つからない場合はエラーになります。
    * `_type` 属性は「推論が失敗して別の型にデコードされる」ことを防ぐために指定することを推奨します。しかし、利便性のために一部APIを除き指定は必須ではありません。

    ## APIに指定するID/名前の制約

    * APIで使用する各データのIDに使用できる文字種は次の通りです。
      * 半角英数字
      * `_` (アンダースコア)
      * `-` (ハイフン)
      * `.` (ドット)
    * 特に制限がない限り、IDはUUID version4形式とすることを推奨します。
      * 例） `b048c6b3-b36f-4c8d-97ea-96828a50a44c`
    * 各データのIDは、以下のように特定のデータに対して一意な値である必要があります。

    ID/名前 | 一意制約
    ---|---
    組織名 | AnnoFab内で一意
    組織ID | AnnoFab内で一意
    ユーザID | AnnoFab内で一意
    アカウントID  | AnnoFab内で一意
    プロジェクトID | AnnoFab内で一意
    タスクID（プレフィックス含む） | プロジェクト内で一意
    入力データID | プロジェクト内で一意
    アノテーションID | フレーム内（タスクID、入力データIDの組み合わせ）で一意
    検査ID | プロジェクト内で一意
    補助情報ID | プロジェクト内で一意
    WebhookID | プロジェクト内で一意
    作業ガイド画像ID | プロジェクト内で一意
    ラベルID | プロジェクト内で一意
    属性ID | プロジェクト内で一意
    選択肢ID | 属性内で一意
    ジョブID | プロジェクト内で一意
    入力データセットID | 組織内で一意
    プラグインID | 組織内で一意

    ## 検索結果の集約を表す AggregationResult

    いくつかの検索系 API の検索結果レスポンスは、`AggregationResult` というデータ構造のフィールドを持っています。
    `AggergationResult` は、検索対象リソースをある観点で集約した結果を表します。
    このような集約は、「検索結果を属性 XXX の件数別に分類」などするために使われます。

    例えば、タスクを検索する API には、以下のような「タスクの現在担当者での集約 `account_id_count`」などの `AggregationResult` がいくつか含まれています。

    ```json
    {
      "list": [ ... ],
      "aggregations": [
        {
          "_type": "CountResult",
          "name": "account_id_count",
          "field": "account_id",
          "docCount": 15,
          "items": [
            {"key":"c5eee002", "count":9, "aggregations":[], "_type":"..."},
            {"key":"9f110e48", "count":5, "aggregations":[], "_type":"..."},
            {"key":"b25dfeb3", "count":1, "aggregations":[], "_type":"..."}
          ]
        }
      ]
    }
    ```

    上記例 `account_id_count` は、タスクのフィールド `account_id` でタスクを分類したところ「`account_id` が `c5eee002` であるタスクが9件、`9f110e48` であるタスクが5件、`b25dfeb3` であるタスクが1件」だったという結果を表しています。
    また、AggregationResultの集約の件数は、合計で10000件以下に制限されており、それを超える件数がある場合は上位10000件が取得されます。もし、省略された部分を取得したい場合は、検索条件を縛って結果に上る集約の数を減らしてください。

  version: 0.94.7
  title: AnnoFab Web API
  x-logo:
    url: "https://annofab.com/images/logo_landscape.png"
    href: "https://annofab.com/"
  contact:
    url: "https://annofab.com/docs/forms/trouble-shooting.html"
servers:
- url: https://annofab.com/api/v1
tags:
- name: af-account
  x-displayName: Account
  description: ユーザーアカウントに対する操作
- name: af-annotation
  x-displayName: Annotation
  description: アノテーションに対する操作
- name: af-annotation-specs
  x-displayName: Annotation Specs
  description: アノテーション仕様に対する操作
- name: af-input
  x-displayName: Input
  description: |
    **入力データ（input data）**に対する操作です。

    入力データとは、アノテーションする対象となる画像、動画、CSVなどのファイル全般のことです。
    入力データは、プロジェクトごとに作成されます。

    すべてのAF利用プランで、入力データをAnnoFabにアップロードできます。
    AnnoFabにアップロードされた入力データは、AnnoFabからアノテーションツール上に配信されます。

    ビジネスプランでは、入力データをお客様が管理される**プライベートストレージ**に置き、URLだけをAnnoFabに登録できます。
    プライベートストレージには、**httpsサーバーに対応したNAS**または**AWS S3**を利用できます。
    プライベートストレージに置かれた入力データは、AnnoFabのサーバーを経由せず、直接アノテーションツール上に配信されます。
    セキュリティ要件のためお客様の入力データを社外（AnnoFab含む）に非公開にしたい場合、プライベートストレージを利用することができます。
    また場合によっては、AnnoFabから入力データを配信するよりも配信速度が改善する場合があります。

    関連
    * [af-supplementary](#tag/af-supplementary): 入力データを補う補助情報
- name: af-inspection
  x-displayName: Inspection
  description: 検査コメントに対する操作
- name: af-instruction
  x-displayName: Instruction
  description: 作業ガイドに対する操作
- name: af-job
  x-displayName: Job
  description: バッチ処理ジョブに対する操作
- name: af-login
  x-displayName: Login
  description: ログイン関連の操作
- name: af-my
  x-displayName: My
  description: 自身のリソースに対する操作
- name: af-organization
  x-displayName: Organization
  description: 組織に対する操作
- name: af-organization-input
  x-displayName: Organization Input
  description: |
    組織の入力データセットと入力データに対する操作

    **入力データセット**とは、プロジェクトが用いる入力データの集合です。入力データセットは組織に所属します。
    現時点では入力データセットはプロジェクトを新規作成するごとに一つずつ作成されるようになっています。
    将来的にプロジェクトの新規作成時に同じ組織の別のプロジェクトの入力データセットを指定して入力データを共有できるようにする機能のリリースを予定しています。
- name: af-organization-member
  x-displayName: Organization Member
  description: 組織メンバーに対する操作
- name: af-organization-plugin
  x-displayName: Organization Plugin
  description: |
    組織で使用するプラグインに対する操作

    **このAPIは AnnoFab に許可された組織だけで使用できます。またアルファ版につき、予告なく変更されることがあります。**
- name: af-project
  x-displayName: Project
  description: プロジェクトに対する操作
- name: af-project-member
  x-displayName: Project Member
  description: プロジェクトメンバーに対する操作
- name: af-statistics
  x-displayName: Statistics
  description: 集計に関する操作
- name: af-supplementary
  x-displayName: Supplementary
  description: |
    **補助情報（supprementary data）**に対する操作です。

    補助情報とは、アノテーションする対象となる[入力データ](#tag/af-input)では*ありません*が、
    アノテーションするときに何らかの手がかりや文脈を与えるデータのことです。
    例えば、次のようなものです。
    * 現在の写真に対する、過去の写真
    * 光学写真に対する、暗視写真
    * 前方を撮影した写真に対する、左側面・右側面・後方の写真
    * 写真や動画を撮影した日時、緯度経度、撮影者などのメタデータ（テキスト）

    補助情報は、画像やテキストで、プロジェクトの入力データごとにひも付けられます。
    補助情報で扱う画像は、入力データと同様にAnnoFabにアップロードする他に、プライベートストレージの画像を利用することもできます。

    関連
    * [af-input](#tag/af-input): 補助情報をひもづける入力データ
    * [af-project](#tag/af-project): 補助情報をひもづけるプロジェクト
- name: af-task
  x-displayName: Task
  description: タスクに対する操作
- name: af-webhook
  x-displayName: Webhook
  description: Webhookに対する操作
- name: x-annotation-zip
  x-displayName: Annotation ZIP
  description: |
    AnnoFabで作成したアノテーションは、元となった入力データ（画像や動画など）に対応する形で1ファイルのJSONとなります。
    これらのJSONはZIP形式で圧縮され、一括で取得できます。

    AnnoFabから取得できるアノテーションの構造は、現在2種類あります。

    1. Simple
      * バウンディングボックスや属性など、いわゆるアノテーションにしぼった軽量な構造。
      * いかなるプロジェクトでも取得できます。
      * 推奨版です。
      * アノテーションZIPおよびアノテーション構造の詳細は、 [Simple Annotation ZIP](#section/Simple-Annotation-ZIP) を参照ください。
    2. Full
      * バウンディングボックスや属性に加え、アノテーションを作成したタスクに関する構造が含まれる重厚長大な構造。
      * Businessプラン組織のプロジェクトでのみ取得できます。
      * 非推奨版です。長期的には廃止予定なので、新規の使用は控え、Simpleへ移行してください。
      * アノテーションZIPおよびアノテーション構造の詳細は、 [Full Annotation ZIP](#section/Full-Annotation-ZIP) を参照ください。

    アノテーションは、各プロジェクトのトップページでダウンロードできます。また、次のAPIを利用して取得することもできます。

    * Simple版アノテーションZIP取得API: [getAnnotationArchive](#operation/getAnnotationArchive)
    * Full版アノテーションZIP取得API: [getArchiveFullWithProId](#operation/getArchiveFullWithProId)

    なお、アノテーションZIPは毎日AM 03:00 JSTごろに自動更新されます。

    ## Simple Annotation ZIP
    ### ファイル名
    `af-annotation-{プロジェクトID}-{更新日時: yyyyMMdd-hhmmss}.zip`

    ### ZIPファイル内の構造
    * / (ZIPファイルのルートディレクトリ)
      * {タスクID}/
        * {入力データID}.json
          * アノテーションJSONデータ (詳細は次節を参照)
        * {入力データID}/ (塗りつぶしアノテーション時のみ)
          * {アノテーションデータID} (塗りつぶしのPNG画像)

    ### アノテーションJSONデータの構造
    Simple版アノテーションZIPに含まれるアノテーションJSONは、機械学習の一般的な利用で扱いやすい構造になっています。
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/SimpleAnnotation" />

    ### 注意事項
    同じ入力データ名を持つ入力データが複数存在する場合、Simple版アノテーションZIP内のファイル名およびディレクトリ名が `{入力データ名__入力データID}` となる場合があります。

    この現象は[入力データ更新API](#operation/putInputData)を使用して、複数の入力データの入力データ名を重複させた場合に発生することがあります。
    AnnoFabの画像アップロード機能のみ使用していた場合には発生しません。

    この現象を回避したい場合、入力データ更新APIを使用して入力データ名の重複を解消した後、アノテーションZIPを再作成してください。

    ## Full Annotation ZIP
    ### ファイル名
    `af-annotation-{プロジェクトID}-{更新日時: yyyyMMdd-hhmmss}.zip`

    ### ZIPファイル内の構造
    * / (ZIPファイルのルートディレクトリ)
      * {タスクID}/
        * {入力データID}.json
          * アノテーションJSONデータ (詳細は次節を参照)
        * {入力データID}/ (塗りつぶしアノテーション時のみ)
          * {アノテーションデータID} (塗りつぶしのPNG画像)

    ### アノテーションJSONデータの構造
    Full版アノテーションZIPに含まれるアノテーションJSONは、画像やアノテーションやアノテーション作成者など管理用の詳細情報が付随しています。
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/FullAnnotation" />

- name: x-data-types
  x-displayName: Data Types
  description: |
    # Task
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/Task" />

    # TaskHistory
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/TaskHistory" />

    # TaskHistoryEvent
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/TaskHistoryEvent" />

    # Inspection
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/Inspection" />

    # TaskStatus
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/TaskStatus" />

    # TaskPhase
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/TaskPhase" />

    # AnnotationId
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/AnnotationId" />

    # InputData
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/InputData" />

    # JobType
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/JobType" />

    # AnnotationQuery
    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/AnnotationQuery" />

    # ArrayOfProjectTaskStatisticsHistory

    日付ごと、タスクフェーズごと、タスクステータスごとに以下の項目を集計したデータです。
    * タスク数
    * 累計作業時間

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfProjectTaskStatisticsHistory" />

    # ArrayOfProjectAccountStatistics

    ユーザごと、日ごとに以下の項目を集計したデータです。
    * 教師付フェーズのタスクを提出した回数、または検査/受入フェーズのタスクを合格/差戻にした回数
    * 教師付フェーズを担当して提出したタスクが差し戻された回数、または受入フェーズを担当して合格にしたタスクが受入完了状態を取り消された回数
    * 作業時間

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfProjectAccountStatistics" />

    # ArrayOfInspectionStatistics

    ラベルごと、定型指摘ごとに検査コメント数を集計したデータです。

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfInspectionStatistics" />

    # ArrayOfTaskPhaseStatistics

    日ごと、フェーズごとに以下の項目を集計したデータです。
    * 累積作業時間

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfTaskPhaseStatistics" />

    # ArrayOfLabelStatistics

    アノテーションラベルごとに以下の項目を集計したデータです。
    * 受入が完了したアノテーション数
    * 受入が完了していないアノテーション数

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfLabelStatistics" />

    # ArrayOfWorktimeStatistics

    単位当たり（タスク1個、画像1個、動画1分）の作業時間情報を集計したデータです。

    ヒストグラムは、最終日の `by_tasks`、`by_inputs` のみ格納されます。
    アカウント毎の集計の `by_tasks`、`by_inputs` には、最終日であってもヒストグラムは格納されません。

    <SchemaDefinition schemaRef="swagger-api-components.yaml#/components/schemas/ArrayOfWorktimeStatistics" />
x-tagGroups:
  - name: API
    tags:
      - af-account
      - af-annotation
      - af-annotation-specs
      - af-input
      - af-inspection
      - af-instruction
      - af-job
      - af-login
      - af-my
      - af-organization
      - af-organization-input
      - af-organization-member
      - af-organization-plugin
      - af-project
      - af-project-member
      - af-statistics
      - af-supplementary
      - af-task
      - af-webhook
  - name: Appendix
    tags:
      - x-annotation-zip
      - x-data-types
components:
  securitySchemes:
    EveryoneRequestBody:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/EveryoneRequestBody"
    EveryoneQueryParameter:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/EveryoneQueryParameter"
    Everyone:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/Everyone"
    AnnoFabAdminOnly:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/AnnoFabAdminOnly"
    AllProjectMember:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/AllProjectMember"
    ProjectAccepter:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/ProjectAccepter"
    ProjectDataUser:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/ProjectDataUser"
    ProjectAccepterOrDataUser:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/ProjectAccepterOrDataUser"
    ProjectOwner:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/ProjectOwner"
    AllOrganizationMember:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/AllOrganizationMember"
    OrganizationAdministrator:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/OrganizationAdministrator"
    OrganizationOwner:
      $ref: "swagger-api-components.yaml#/components/securitySchemes/OrganizationOwner"
paths:
  /login:
    post:
      tags:
      - af-login
      summary: ログイン
      description: |
        AnnoFab にログインし、その他 API の認証に必要なトークンを取得します。

        トークンは本人認証に使われる機密情報です。なりすましなど悪用のおそれがあるため、他人への提供は推奨されません。
      security:
      - EveryoneRequestBody: []
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/LoginRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/LoginResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /logout:
    post:
      tags:
      - af-login
      summary: ログアウト
      description: "本人認証にはリクエストボディのトークンを使用します。"
      security:
      - EveryoneRequestBody: []
      operationId: logout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/Token"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /refresh-token:
    post:
      tags:
      - af-login
      summary: トークン リフレッシュ
      description: |
        トークンを再発行します。
        IDトークンやアクセストークンの有効期限が切れた場合に使います。

        リフレッシュトークンの有効期限が切れた場合は本 API では再発行できません。代わりに、[login API](#operation/login) を実行します。
      security:
      - EveryoneRequestBody: []
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Token"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorRefreshTokenExpired"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /sign-up:
    post:
      tags:
      - af-account
      summary: サインアップstep1（仮登録）
      description: |
        アカウントのサインアップの最初のステップとして、アカウントを仮登録します。

        AnnoFab に未登録のメールアドレスであれば、新規アカウントが仮登録状態で作成され、本登録フローのためのメールが送信されます。
        このメールには仮パスワードなどが記載されています。

        指定したメールアドレスを使うユーザーが仮登録であれば、本登録フローのメールが再送信されます。
        指定したメールアドレスを使うユーザーが本登録であれば、不正なリクエストとしてエラーを返します（本登録が仮登録に戻ることはありません）。
      operationId: initiateSignup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/SignUpRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
  /confirm-sign-up:
    post:
      tags:
      - af-account
      summary: サインアップstep2（本登録）
      description: |
        アカウントのサインアップの最後のステップとして、アカウントを本登録します。
      operationId: confirmSignup
      security:
      - EveryoneRequestBody: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ConfirmSignUpRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /change-password:
    post:
      tags:
      - af-account
      summary: パスワード変更
      description: |
        パスワードの変更を試みます。

        パスワードの要件を満たさない場合、エラーメッセージが返ります。
      security:
      - Everyone: []
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ChangePasswordRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /request-password-reset:
    post:
      tags:
      - af-account
      summary: パスワードリセットstep1（開始）
      description: |
        パスワードリセットに必要な確認コードをメールで送付します。
        後続の[新しいパスワードに変更](#operation/confirmResetPassword)を実行することで、新しいパスワードに変更できます。
      security:
      - EveryoneRequestBody: []
      operationId: initiatePasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PasswordResetRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /confirm-reset-password:
    post:
      tags:
      - af-account
      summary: パスワードリセットstep2（新しいパスワードに変更）
      description: |
        新しいパスワードに変更します。
        本人確認のため、[パスワードリセットを要求](#operation/initiateResetPassword)で受信したメールに記載された検証コードを使用します。

        パスワードリセットプロセスの最終ステップです。
      security:
      - EveryoneRequestBody: []
      operationId: confirmResetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ConfirmResetPasswordRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /reset-email:
    post:
      tags:
      - af-account
      summary: メールアドレスリセットstep1（開始）
      description: |
        メールアドレス変更プロセスを開始します。

        本人からの要求かどうかを検証するための確認コードがメールで送付されます。
      security:
      - Everyone: []
      operationId: initiateResetEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ResetEmailRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /confirm-reset-email:
    post:
      tags:
      - af-account
      summary: メールアドレスstep2（確定）
      description: |
        [受け取った確認コード](#operation/initiateResetEmail)を使い、メールアドレスを変更します。
      security:
      - EveryoneRequestBody: []
      operationId: confirmResetEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ConfirmResetEmailRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /verify-email:
    post:
      tags:
      - af-account
      summary: メールアドレス検証step1（開始）
      description: |
        メールアドレスが有効かどうかの確認プロセスを開始します。

        本人からの要求かどうかを検証するための確認コードがメールで送付されます。
      security:
      - Everyone: []
      operationId: initiateVerifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/VerifyEmailRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /confirm-verify-email:
    post:
      tags:
      - af-account
      summary: メールアドレス検証step2（確定）
      description: |
        [受け取った確認コード](#operation/initiateVerifyEmail)を使い、メールアドレスが有効であることを確認します。
      security:
      - Everyone: []
      operationId: confirmVerifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ConfirmVerifyEmailRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/account:
    get:
      tags:
      - af-my
      summary: 自分のアカウント取得
      description: |
        API リクエストユーザーのアカウント情報を取得します。
      security:
      - Everyone: []
      operationId: getMyAccount
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/MyAccount"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-my
      summary: 自分のアカウント情報更新
      description: |
        API リクエストユーザーのアカウント情報を更新します。
      security:
      - Everyone: []
      operationId: putMyAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutMyAccountRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/MyAccount"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/account/delete-request:
    post:
      tags:
      - af-my
      summary: アカウント削除step1（確認）
      description: |
        アカウント削除プロセスを開始します。

        本人からの要求かどうかを検証するための確認コードがメールで送付されます。
      security:
      - Everyone: []
      operationId: initiateMyAccountDelete
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/account/delete-request/confirm:
    post:
      tags:
      - af-my
      summary: アカウント削除step2（確定）
      description: |
        [受け取った確認コード](#operation/initiateMyAccountDelete)を使い、アカウントを削除します。
      security:
      - EveryoneRequestBody: []
      operationId: confirmMyAccountDelete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ConfirmAccountDeleteRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "409":
          description: 自身のみがオーナーのプロジェクト、または組織が1つ以上存在した
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/project-members:
    get:
      tags:
      - af-my
      summary: 自分のプロジェクトメンバー情報一括取得
      description: |
        API リクエストユーザーが所属するすべてのプロジェクトにおける、自身がどのようなメンバー設定で所属しているかをまとめて取得します。
      security:
      - Everyone: []
      operationId: getMyProjectMembers
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/ProjectMember"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
  /organizations:
    post:
      tags:
        - af-organization
      summary: 組織新規作成
      description: |
        同じ name の組織が既に存在する場合は失敗（400）します。
      security:
        - Everyone: []
      operationId: createNewOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/OrganizationRegistrationRequest"
      responses:
        "200":
          description: 作成に成功すると、その組織
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Organization"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/organizations:
    get:
      tags:
      - af-my
      summary: 所属組織一括取得
      description: |
        API リクエストユーザーが所属するすべての組織における、自身がどのようなメンバー設定で所属しているかをまとめて取得します。
      security:
      - AllOrganizationMember: []
      operationId: getMyOrganizations
      parameters:
      - name: page
        in: query
        description: |
          表示するページ番号

          現在は未実装のパラメータです。(今後対応予定)
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: |
          1ページあたりの取得するデータ件数

          現在は未実装のパラメータです。(今後対応予定)
        required: false
        schema:
          type: integer
          minimum: 1
          default: 30
          maximum: 200
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/MyOrganizationList"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-my
      summary: 組織名変更
      description: |
        同じ name の組織が既に存在する場合は失敗(400)します。
      security:
      - OrganizationOwner: []
      operationId: updateOrganization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutOrganizationNameRequest"
      responses:
        "200":
          description: 変更に成功すると、その組織
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Organization"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "409":
          description: 先に更新されているため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorAlreadyUpdated"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}:
    get:
      tags:
      - af-organization
      summary: 組織情報取得
      description: |
        指定組織の組織IDなどの情報を取得します。
      security:
      - AllOrganizationMember: []
      operationId: getOrganization
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Organization"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
        - af-organization
      summary: 組織削除
      description: |
        組織を完全に削除します。

        組織のプロジェクトが1件も存在しない場合のみ削除できます。
        組織を削除したい場合は全てのプロジェクトを削除してください。
        また、削除された組織は元に戻せませんのでご注意ください。
      security:
        - OrganizationOwner: []
      operationId: deleteOrganization
      parameters:
        - name: organization_name
          in: path
          description: 組織名
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Organization"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: プロジェクトが存在する組織を削除しようとした
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/projects:
    get:
      tags:
      - af-organization
      summary: 組織配下プロジェクト一括取得
      description: |
        指定した組織のプロジェクトを一括で取得します。
      security:
      - AllOrganizationMember: []
      operationId: getProjectsOfOrganization
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: |
          表示するページ番号
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: |
          1ページあたりの取得するデータ件数
        required: false
        schema:
          type: integer
          minimum: 1
          default: 30
          maximum: 200
      - name: account_id
        in: query
        description: |
          指定したアカウントIDをメンバーに持つプロジェクトで絞り込む。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/AccountId"
      - name: except_account_id
        in: query
        description: |
          指定したアカウントIDをメンバーに持たないプロジェクトで絞り込む。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/AccountId"
      - name: title
        in: query
        description: |
          プロジェクトタイトルでの部分一致検索。1文字以上あれば使用します。利便性のため、大文字小文字は区別しません。
        required: false
        schema:
          type: string
      - name: status
        in: query
        description: |
          指定した状態のプロジェクトで絞り込む。未指定時は全プロジェクト。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectStatus"
      - name: input_data_type
        in: query
        description: |
          指定した入力データ種別でプロジェクトを絞り込む。未指定時は全プロジェクト。
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataType"
      - name: sort_by
        in: query
        description: |
          `date` を指定することでプロジェクトの最新のタスク更新時間の順にソートして出力する。
          未指定時はプロジェクト名でソートする。
        required: false
        schema:
          type: string
          example: date
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/members:
    get:
      tags:
      - af-organization-member
      summary: 組織メンバー一括取得
      description: |
        脱退したメンバーは含まれません。
      security:
      - AllOrganizationMember: []
      operationId: getOrganizationMembers
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationMemberList"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/members/{user_id}:
    get:
      tags:
      - af-organization-member
      summary: 組織メンバー取得
      description: |
        指定したユーザーが指定した組織にどのようなロールで参加しているかを取得します。
      security:
      - AllOrganizationMember: []
      operationId: getOrganizationMember
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: ユーザID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationMember"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-organization-member
      summary: 組織メンバー削除
      description: |
        指定したメンバーを指定した組織から削除します。

        組織の管理者が実行する場合、組織のオーナーは削除できません。(権限エラーになります)
      security:
      - OrganizationAdministrator: []
      operationId: deleteOrganizationMember
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: ユーザID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      responses:
        "200":
          description: 正常。削除したメンバーを返します
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationMember"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/members/{user_id}/role:
    put:
      tags:
      - af-organization-member
      summary: 組織メンバーのロール更新
      description: |
        指定された組織メンバーのロールのみを変更します。
      security:
      - OrganizationOwner: []
      operationId: updateOrganizationMemberRole
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: ユーザID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutOrganizationMemberRoleRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationMember"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/members/{user_id}/invitation:
    post:
      tags:
      - af-organization-member
      summary: 組織への招待送信
      description: |
        指定したユーザーに、組織への招待（メール）を送信します。

        組織の管理者が実行する場合、リクエストボディ内の `role` には `contributor` を指定してください。(それ以外の値を指定した場合エラーとなります)
      security:
      - OrganizationAdministrator: []
      operationId: inviteOrganizationMember
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: ユーザ名
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/InviteOrganizationMemberRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationMember"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/members/{user_id}/invitation/accept:
    post:
      tags:
      - af-organization-member
      summary: 組織への招待受諾
      description: |
        組織への招待を受諾し、組織へのメンバー登録を完了します。

        [組織招待API](#operation/postInviteOrganizationMember)で送信されたメールに記載されているトークンが必要です。
      security:
      - EveryoneRequestBody: []
      operationId: acceptOrganizationInvitation
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: ユーザ名
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/AcceptOrganizationInvitationRequest"
      responses:
        "200":
          $ref: "swagger-api-components.yaml#/components/responses/SuccessMessage"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/activity:
    get:
      tags:
      - af-organization
      summary: 組織活動サマリー取得
      description: |
        組織全体でどれだけ AnnoFab ストレージを使用しているかなどの活動の要約を取得します。
      security:
      - AllOrganizationMember: []
      operationId: getOrganizationActivity
      parameters:
      - name: organization_name
        in: path
        description: 組織名
        required: true
        schema:
          type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationActivity"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/plugins:
    get:
      operationId: getOrganizationPlugins
      summary: プラグイン一括取得
      description: |
        **この API は AnnoFab に許可された組織だけで使用できます。またアルファ版につき、予告なく変更されることがあります。**

        指定した組織のプラグインを一括で取得します。
      tags:
        - af-organization-plugin
      security:
        - AllOrganizationMember: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationPluginList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/plugins/{plugin_id}:
    get:
      operationId: getOrganizationPlugin
      summary: プラグイン取得
      description: |
        **この API は AnnoFab に許可された組織だけで使用できます。またアルファ版につき、予告なく変更されることがあります。**

        指定した組織のプラグインを取得します。
      tags:
        - af-organization-plugin
      security:
        - AllOrganizationMember: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
        - name: plugin_id
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/PluginId"
          description: プラグインID
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationPlugin"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      operationId: putOrganizationPlugin
      summary: プラグイン更新
      description: |
        **この API は AnnoFab に許可された組織だけで使用できます。またアルファ版につき、予告なく変更されることがあります。**

        指定した組織のプラグインを更新します。
      tags:
        - af-organization-plugin
      security:
        - OrganizationAdministrator: []
        - OrganizationOwner: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
        - name: plugin_id
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/PluginId"
          description: プラグインID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutOrganizationPluginRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationPlugin"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      operationId: deleteOrganizationPlugin
      summary: プラグイン削除
      description: |
        **この API は AnnoFab に許可された組織だけで使用できます。またアルファ版につき、予告なく変更されることがあります。**

        指定した組織のプラグインを削除します。
      tags:
        - af-organization-plugin
      security:
        - OrganizationAdministrator: []
        - OrganizationOwner: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
        - name: plugin_id
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/PluginId"
          description: プラグインID
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/OrganizationPlugin"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/input_data_set:
    get:
      operationId: getInputDataSetList
      summary: 入力データセット一括取得
      description: |
        指定した組織の[入力データセット](#tag/af-organization-input)を一括で取得します。
      tags:
        - af-organization-input
      security:
        - OrganizationAdministrator: []
        - OrganizationOwner: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputDataSetList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/input_data_set/{input_data_set_id}:
    get:
      operationId: getInputDataSet
      summary: 入力データセット情報取得
      description: |
        指定した組織の[入力データセット](#tag/af-organization-input)の情報を取得します。
        組織オーナーまたは組織管理者でない場合は自身が所属するプロジェクトの入力データセットのみが取得できます。
      tags:
        - af-organization-input
      security:
        - AllOrganizationMember: []
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
        - name: input_data_set_id
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/InputDataSetId"
          description: 入力データセットID
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputDataSet"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /organizations/{organization_name}/input_data_set/{input_data_set_id}/inputs/{input_data_id}:
    get:
      tags:
        - af-organization-input
      summary: 入力データセットの入力データ取得
      description: |
        指定した組織の[入力データセット](#tag/af-organization-input)内で指定した入力データ情報を取得します。
        組織オーナーまたは組織管理者でない場合は自身が所属するプロジェクトの入力データセット内の入力データのみが取得できます。
      security:
        - AllOrganizationMember: []
      operationId: getOrganizationInputData
      parameters:
        - name: organization_name
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/OrganizationName"
          description: 組織名
        - name: input_data_set_id
          in: path
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/InputDataSetId"
          description: 入力データセットID
        - name: input_data_id
          in: path
          description: 入力データID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputData"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/projects:
    get:
      tags:
      - af-my
      summary: 所属プロジェクト一括取得
      description: |
        自身が所属するプロジェクトを一括で取得します。
      security:
      - Everyone: []
      operationId: getMyProjects
      parameters:
      - name: page
        in: query
        description: |
          表示するページ番号
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: |
          1ページあたりの取得するデータ件数
        required: false
        schema:
          type: integer
          minimum: 0
          maximum: 200
      - name: organization_id
        in: query
        description: |
          指定した組織に属するプロジェクトに絞り込む。未指定時は全プロジェクト。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/OrganizationId"
      - name: title
        in: query
        description: |
          プロジェクトタイトルでの部分一致検索。1文字以上あれば使用します。利便性のため、大文字小文字は区別しません。
        required: false
        schema:
          type: string
      - name: status
        in: query
        description: |
          指定した状態のプロジェクトで絞り込む。未指定時は全プロジェクト。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectStatus"
      - name: input_data_type
        in: query
        description: |
          指定した入力データ種別でプロジェクトを絞り込む。未指定時は全プロジェクト
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataType"
      - name: sort_by
        in: query
        description: |
          `date` を指定することでプロジェクトの最新のタスク更新時間の順にソートして出力する。
          未指定時はプロジェクト名でソートする。
        required: false
        schema:
          type: string
          example: date
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectContainer"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}:
    get:
      tags:
      - af-project
      summary: プロジェクト取得
      description: |
        プロジェクトを取得します。
      security:
      - AllProjectMember: []
      operationId: getProject
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Project"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-project
      summary: プロジェクト作成/更新
      description: |
        プロジェクトを新規作成または更新します。

        ### 新規作成する場合
        ユーザーは、作成するプロジェクトをひもづける組織の [OrganizationAdministrator](#section/Authentication/OrganizationAdministrator) である必要があります。

        ### 更新する場合
        ユーザーは、更新するプロジェクトの [ProjectOwner](#section/Authentication/ProjectOwner) である必要があります。
        また所属組織を変更する場合は、新しくひもづける組織の [OrganizationAdministrator](#section/Authentication/OrganizationAdministrator) である必要があります。

        なお、プロジェクト状態を「停止中」にした場合、アノテーションZIPやタスク進捗状況などの集計情報は自動更新されなくなります。
      security:
      - OrganizationAdministrator: []
        ProjectOwner: []
      operationId: putProject
      parameters:
      - name: project_id
        in: path
        description: |
          プロジェクトID。[値の制約についてはこちら。](#section/API-Convention/APIID)
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: v
        in: query
        description: |
          APIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：Project
          - "2"：PutProjectResponse
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutProjectRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Project"
        "202":
          description: 組織変更実施時
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/PutProjectResponseWrapper"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "409":
          description: 現在のプロジェクトやタスクの状態ではできない操作をしようとした
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-project
      summary: プロジェクト削除
      description: |
        プロジェクトを完全に削除します。
        アノテーション仕様、タスク、入力データ、アノテーションなど、プロジェクト配下のリソースがすべて削除されます。

        削除されたプロジェクトは元に戻せません。
        完了したプロジェクトは削除せず、プロジェクト状態を「停止中」に変更するのをおすすめします。
      security:
      - ProjectOwner: []
      operationId: deleteProject
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: v
        in: query
        description: |
          APIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：Project
          - "2"：DeleteProjectResponse
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      responses:
        "202":
          description: バッチにてプロジェクトの削除開始
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/DeleteProjectResponseWrapper"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: 停止中ではないプロジェクトを削除しようとした
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/organization:
    get:
      tags:
      - af-project
      summary: プロジェクトの所属組織取得
      description: |
        指定されたプロジェクトがひもづく組織を取得します。
      security:
      - AllProjectMember: []
      operationId: getOrganizationOfProject
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Organization"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/copy:
    post:
      tags:
      - af-project
      summary: プロジェクト複製
      description: |
        指定したプロジェクトのデータを引き継いだ新しいプロジェクトを作成します。
        新しいプロジェクトに引き継がれるデータは次の通りです。

        * プロジェクト設定
        * プロジェクトメンバー
        * アノテーション仕様

        また、オプションを指定することで新しいプロジェクトに次のデータを引き継ぐことも可能です。

        |引き継ぎ対象|同時に引き継ぐ必要があるデータ|
        |:--|:--|
        |入力データ||
        |タスク|入力データ|
        |アノテーション|入力データ、タスク|
        |補助情報|入力データ|
        |作業ガイド||
        |Webhook||

        このAPIを利用するには、プロジェクトを登録する組織の[OrganizationAdministrator](#section/Authentication/OrganizationAdministrator) かつ コピー元プロジェクトの [ProjectOwner](#section/Authentication/ProjectOwner) である必要があります。

        本APIを実行すると、バックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`copy-project`）。
      security:
      - OrganizationAdministrator: []
        ProjectOwner: []
      operationId: initiateProjectCopy
      parameters:
      - name: project_id
        in: path
        description: コピー元となるプロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: v
        in: query
        description: |
          APIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：Project
          - "2"：ProjectCopyResponse
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ProjectCopyRequest"
      responses:
        "202":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectCopyResponseWrapper"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/rawdata/inputs:
    get:
      tags:
        - af-project
      summary: プロジェクトの入力データ情報全件URLの取得
      description: |
        入力データ情報全件ファイルにアクセスするための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        ### 入力データ情報全件ファイル
        入力データ情報全件ファイルには、プロジェクトの入力データ情報がJSON形式（[InputData](#section/InputData)の配列）で記録されています。
        ただし`InputData`中の`url`は常に`null`です。
        このファイルは毎日AM 02:00 JSTに更新されます。
      security:
        - ProjectDataUser: []
      operationId: getProjectInputsUrl
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
        - af-project
      summary: プロジェクトの入力データ情報全件ファイル更新開始
      description: |
        プロジェクト内の入力データ情報全件ファイルの更新を開始します。
        ファイルの更新時間は、データ量に応じて数分～数十分程度かかります。
        本APIを実行すると、バックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`gen-inputs-list`）。

        入力データ情報全件ファイルは毎日AM 02:00 JSTに自動更新されます。
        本APIを用いると、自動更新を待たずに更新を要求できます。
        ただし、入力データ情報全件ファイル以外は更新されません。

        入力データ情報全件ファイルについては、[getProjectInputsUrl](#operation/getProjectInputsUrl) APIを参照ください。
      security:
        - ProjectDataUser: []
      operationId: postProjectInputsUpdate
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "202":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectInputsUpdateResponse"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/rawdata/tasks:
    get:
      tags:
      - af-project
      summary: プロジェクトのタスク全件URLの取得
      description: |
        タスク全件ファイルにアクセスするための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        ### タスク全件ファイル
        タスク全件ファイルには、プロジェクトのタスク情報がJSON形式（[Task](#section/Task)の配列）で記録されています。
        このファイルは毎日AM 02:00 JSTに更新されます。
        また、[postProjectTasksUpdate](#operation/postProjectTasksUpdate) APIを利用することで、手動でタスク全件ファイルを更新することも可能です。
      security:
      - ProjectDataUser: []
      operationId: getProjectTasksUrl
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
      - af-project
      summary: プロジェクトのタスク全件ファイル更新開始
      description: |
        プロジェクト内のタスク全件ファイルの更新を開始します。
        ファイルの更新時間は、データ量に応じて数分～数十分程度かかります。
        本APIを実行すると、バックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`gen-tasks-list`）。

        タスク全件ファイルは毎日AM 02:00 JSTに自動更新されます。
        本APIを用いると、自動更新を待たずに更新を要求できます。
        ただし、タスク全件ファイル以外は更新されません。

        タスク全件ファイルについては、[getProjectTasksUrl](#operation/getProjectTasksUrl) APIを参照ください。
      security:
        - ProjectDataUser: []
      operationId: postProjectTasksUpdate
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
        - name: v
          in: query
          description: |
            APIの戻り型のバージョンを指定します。
            値と戻り型の対応は以下です。
            - "1"：Message
            - "2"：PostProjectTasksUpdateResponse
          required: false
          schema:
            type: string
            default: "1"
            example: "2"
      responses:
        "202":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/PostProjectTasksUpdateResponseWrapper"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/rawdata/inspections:
    get:
      tags:
      - af-project
      summary: プロジェクトの検査コメント全件URLの取得
      description: |
        検査コメント全件ファイルにアクセスするための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        ### 検査コメント全件ファイル
        検査コメント全件ファイルには、プロジェクトの検査コメント情報がJSON形式（[Inspection](#section/Inspection)の配列）で記録されています。
        このファイルは毎日AM 02:00 JSTに更新されます。
      security:
      - ProjectDataUser: []
      operationId: getProjectInspectionsUrl
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/rawdata/task_history_events:
    get:
      deprecated: true
      tags:
      - af-project
      summary: プロジェクトのタスク履歴イベント全件URLの取得
      description: |
        タスク履歴イベント全件ファイルにアクセスするための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        ### タスク履歴イベント全件ファイル
        タスク履歴イベント全件ファイルには、プロジェクトのタスク履歴イベント情報がJSON形式（[TaskHistoryEvent](#section/TaskHistoryEvent)の配列）で記録されています。
        このファイルは毎日AM 02:00 JSTに更新されます。
      security:
      - ProjectDataUser: []
      operationId: getProjectTaskHistoryEventsUrl
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/rawdata/task_histories:
    get:
      tags:
        - af-project
      summary: プロジェクトのタスク履歴全件URLの取得
      description: |
        タスク履歴全件ファイルにアクセスするための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        ### タスク履歴全件ファイル
        タスク履歴イベント全件ファイルには、プロジェクトのタスク履歴情報がJSON形式（キーがタスクID、値が[TaskHistory](#section/TaskHistory)の配列となるマップ）で記録されています。
        このファイルは毎日AM 02:00 JSTに更新されます。
      security:
        - ProjectDataUser: []
      operationId: getProjectTaskHistoriesUrl
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /my/projects/{project_id}/member:
    get:
      tags:
      - af-my
      summary: 自分のプロジェクトメンバー取得
      description: |
        備考: システム管理者が自身が所属しないプロジェクトに対して実行した場合、オーナーであるというダミーのプロジェクトメンバー情報が取得できます。ダミーには更新日は含まれません。
      security:
      - AllProjectMember: []
      operationId: getMyMemberInProject
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectMember"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/members:
    get:
      tags:
      - af-project-member
      summary: プロジェクトメンバー一括取得
      description: |
        備考: 組織に加入していないメンバーも取得できることがあります（[プロジェクト更新](#operation/putProject)でプロジェクトの組織移動をおこなった場合）。
      security:
      - AllProjectMember: []
      operationId: getProjectMembers
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: include_inactive_member
        in: query
        description: 脱退したプロジェクトメンバーも取得する時に、キーのみ指定します（値は無視されます）。
        required: false
        allowEmptyValue: true
        schema:
          type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectMemberList"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/members/{user_id}:
    get:
      tags:
      - af-project-member
      summary: プロジェクトメンバー取得
      description: |
        プロジェクトの特定のメンバーを取得します。
      security:
      - AllProjectMember: []
      operationId: getProjectMember
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: user_id
        in: path
        description: アカウントのユーザID. RESTクライアントユーザが指定しやすいように、Cognitoのaccount_idではなくuser_idとしている。
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectMember"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-project-member
      summary: プロジェクトメンバー追加/更新
      description: |
        プロジェクトにメンバーを新規に追加、または存在するメンバーの設定を変更します。

        メンバーとなるユーザーは、作成するプロジェクトをひもづける組織に加入している必要があります。
      security:
      - ProjectOwner: []
      operationId: putProjectMember
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: user_id
        in: path
        description: アカウントのユーザID. RESTクライアントユーザが指定しやすいように、Cognitoのaccount_idではなくuser_idとしている。
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/UserId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/ProjectMemberRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ProjectMember"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/tasks:
    get:
      tags:
      - af-statistics
      summary: タスク集計取得
      description: |
        [タスク集計データ](#section/ArrayOfProjectTaskStatisticsHistory) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getTaskStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/accounts:
    get:
      tags:
      - af-statistics
      summary: ユーザー別タスク集計取得
      description: |
        [ユーザー別タスク集計データ](#section/ArrayOfProjectAccountStatistics) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getAccountStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/inspections:
    get:
      tags:
      - af-statistics
      summary: 検査コメント集計取得
      description: |
        [検査コメント集計データ](#section/ArrayOfInspectionStatistics) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getInspectionStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/task-phases:
    get:
      tags:
      - af-statistics
      summary: フェーズ別タスク集計取得
      description: |
        [フェーズ別タスク集計データ](#section/ArrayOfTaskPhaseStatistics) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getTaskPhaseStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/labels:
    get:
      tags:
      - af-statistics
      summary: ラベル別アノテーション数集計取得
      description: |
        [ラベル別アノテーション数集計データ](#section/ArrayOfLabelStatistics) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getLabelStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/worktimes:
    get:
      tags:
      - af-statistics
      summary: タスク作業時間集計取得
      description: |
        [タスク作業時間集計データ](#section/ArrayOfWorktimeStatistics) を取得するための認証済み一時URLを取得します。
      security:
      - AllProjectMember: []
      operationId: getWorktimeStatistics
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/statistics/markers:
    get:
      tags:
      - af-statistics
      summary: 統計グラフマーカー一括取得
      description: |
        指定されたプロジェクトの統計グラフマーカーをすべて取得します。
      security:
      - AllProjectMember: []
      operationId: getMarkers
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Markers"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-statistics
      summary: 統計グラフマーカー更新
      description: |
        指定されたプロジェクトの統計グラフマーカーを更新します。
      security:
      - ProjectOwner: []
      operationId: putMarkers
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/PutMarkersRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Markers"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/jobs:
    get:
      tags:
      - af-job
      summary: バックグラウンドジョブ情報取得
      description: |
        バックグラウンドジョブの情報を取得します。
        取得されるジョブ情報は、作成日付の新しい順にソートされています。

        バックグラウンドジョブ情報は、完了(失敗含む)から14日経過後に自動で削除されます。
      security:
      - AllProjectMember: []
      operationId: getProjectJob
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: type
        in: query
        description: 取得するジョブの種別。[詳細はこちら](#section/JobType)。
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/JobType"
      - name: page
        in: query
        description: |
          検索結果のうち、取得したいページの番号(1始まり)

          現在は未実装のパラメータです。(今後対応予定)
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: |
          1ページあたりの取得するデータ件数。
          未指定時は1件のみ取得。
        required: false
        schema:
          type: integer
          minimum: 0
          maximum: 200
          default: 1
      - name: exclusive_start_created_datetime
        in: query
        description: 取得するデータの直前の作成日時
        required: false
        schema:
          type: string
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/JobInfoContainer"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/jobs/{job_type}/{job_id}:
    delete:
      tags:
      - af-job
      summary: バックグラウンドジョブ情報削除
      description: |
        バックグラウンドジョブ情報を削除します。

        なお、バックグラウンドジョブ情報は、完了(失敗含む)から14日経過後に自動で削除されます。
      security:
      - ProjectOwner: []
      operationId: deleteProjectJob
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: job_type
        in: path
        description: ジョブの種別。[詳細はこちら](#section/JobType)。
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/JobType"
      - name: job_id
        in: path
        description: ジョブID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/JobId"
      responses:
        "200":
          description: 正常
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/webhooks:
    get:
      tags:
      - af-webhook
      summary: プロジェクト Webhook 一括取得
      description: |
        指定されたプロジェクトの Webhook をすべて取得します。
      security:
      - ProjectOwner: []
      operationId: getWebhooks
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/Webhook"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/webhooks/{webhook_id}:
    put:
      tags:
      - af-webhook
      summary: プロジェクト Webhook 作成/更新
      description: |
        プロジェクトのWebhookを新規作成/更新します。

        Webhook で送信される body には、event_type によって以下のプレースホルダーを使用できます。

        * task-completed
          * {{PROJECT_ID}} :  プロジェクトID
          * {{TASK_ID}}	: タスクID
          * {{PROJECT_TITLE}}	: プロジェクトタイトル
          * {{COMPLETE_DATETIME}}	: 完了日時
            * 例 : 2019-05-08T10:00:00.000+09:00
          * {{LAST_ACCOUNT}} : 最終作業者
            * 形式 : アカウントID

        * annotation-archive-updated
          * {{PROJECT_ID}} :  プロジェクトID
          * {{PROJECT_TITLE}}	: プロジェクトタイトル
          * {{COMPLETE_DATETIME}}	: 完了日時
            * 例 : 2019-05-08T10:00:00.000+09:00

        * input-data-zip-registered
          * {{PROJECT_ID}} :  プロジェクトID
          * {{PROJECT_TITLE}}	: プロジェクトタイトル
          * {{COMPLETE_DATETIME}}	: 完了日時
            * 例 : 2019-05-08T10:00:00.000+09:00
          * {{ZIP_NAME}} : ZIPファイル名
            * 例 : input_data.zip

        * project-copy-completed
          * {{PROJECT_ID}} :  プロジェクトID
          * {{DEST_PROJECT_ID}} :  コピー先プロジェクトID
          * {{DEST_PROJECT_TITLE}}	: コピー先プロジェクトタイトル
          * {{COMPLETE_DATETIME}}	: 完了日時
            * 例 : 2019-05-08T10:00:00.000+09:00

      security:
      - ProjectOwner: []
      operationId: putWebhook
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: webhook_id
        in: path
        description: |
          WebhookID。[値の制約についてはこちら。](#section/API-Convention/APIID)
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/WebhookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/Webhook"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Webhook"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-webhook
      summary: プロジェクト Webhook 削除
      description: |
        指定された Webhook を削除
      security:
      - ProjectOwner: []
      operationId: deleteWebhook
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: webhook_id
        in: path
        description: WebhookID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/WebhookId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Webhook"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/webhooks/{webhook_id}/test:
    post:
      tags:
        - af-webhook
      summary: プロジェクト Webhook テスト実行
      description: |
        得録された登録された URL にテスト用の Webhook を実際に送信します。

        送信される Webhook の body に含まれるプレースホルダーは、本 API リクエストで指定されたダミーのプレースホルダーで置き換えられます。
      security:
        - ProjectOwner: []
      operationId: testWebhook
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
        - name: webhook_id
          in: path
          description: WebhookID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/WebhookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/WebhookTestRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/WebhookTestResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/annotation-specs:
    get:
      tags:
      - af-annotation-specs
      summary: アノテーション仕様取得
      description: |
        指定したプロジェクトのアノテーション仕様を取得します。

        パラメータを指定することで、過去に保存された履歴を取得することもできます。
      security:
      - AllProjectMember: []
      operationId: getAnnotationSpecs
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: history_id
        in: query
        description: |
          過去のアノテーション仕様を取得する場合、[アノテーション仕様履歴取得](#operation/getAnnotationSpecsHistories)APIで取得した `history_id` の値を指定します。
          未指定時は最新のアノテーション仕様を取得します。
        required: false
        schema:
          type: string
          example: "123456789"
      - name: v
        in: query
        description: |
          取得するアノテーション仕様のフォーマットバージョンを指定します。
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/AnnotationSpecs"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-annotation-specs
      summary: アノテーション仕様更新
      description: |
        アノテーション仕様を更新します。
      security:
      - ProjectOwner: []
      operationId: putAnnotationSpecs
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/AnnotationSpecsRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/AnnotationSpecsV2"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/annotation-specs-histories:
    get:
      tags:
      - af-annotation-specs
      summary: アノテーション仕様履歴一括取得
      description: |
        指定されたプロジェクトのアノテーション仕様のすべての履歴を取得します。
      security:
      - AllProjectMember: []
      operationId: getAnnotationSpecsHistories
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/AnnotationSpecsHistory"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/start-task:
    post:
      deprecated: true
      tags:
      - af-task
      summary: タスク割当
      description: |
        タスクの割当を要求します。

        個々のタスクの情報を取得する場合は、[タスク取得](#operation/getTask)を使います。
      security:
      - AllProjectMember: []
      operationId: startTask
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/TaskStart"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: タスクを開始できる状態ではない
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks:
    get:
      tags:
      - af-task
      summary: タスク検索
      description: |
        プロジェクトに含まれる複数のタスクをまとめて取得します。

        検索条件を指定することで、特定のユーザが担当するタスクなどを絞り込むことができます。

        パフォーマンスのため、結果はページング形式で返ります。全件取得したい場合は、レスポンスを見て、ページ移動してください。
      security:
      - AllProjectMember: []
      operationId: getTasks
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: page
        in: query
        description: 検索結果のうち、取得したいページの番号(1始まり）
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: 1ページあたりの取得するデータ件数
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 200
          default: 30
      - name: task_id
        in: query
        description: タスクIDでの部分一致検索で使用。1文字以上あれば使用します。利便性のため、大文字小文字は区別しません
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      - name: input_data_ids
        in: query
        description: 指定された入力データIDを使用しているタスクを絞り込みます。カンマ区切りで複数の入力データIDを指定可能です。1文字以上あれば使用します。利便性のため、大文字小文字は区別しません
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      - name: phase
        in: query
        description: 絞り込み条件となるフェーズ名。未指定時は全フェーズ
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskPhase"
      - name: phase_stage
        in: query
        description: 絞り込み条件となるステージ。未指定時は全ステージ
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskPhaseStage"
      - name: status
        in: query
        description: 絞り込み条件となる状態名。未指定時は全ステータス。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskStatus"
      - name: account_id
        in: query
        description: 絞り込み条件となる作業中のアカウントID。未指定時は全アカウント
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/AccountId"
      - name: no_user
        in: query
        description: 未割り当てのタスクを絞り込む時に、キーのみ指定します（値は無視されます）。
        required: false
        allowEmptyValue: true
        schema:
          type: string
      - name: previous_account_id
        in: query
        description: そのタスクをこれまでに担当したことのあるユーザー（現在の担当者含む）のアカウントID。未指定時は全ユーザ
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/AccountId"
      - name: previous_phase
        in: query
        description: そのタスクがこれまでに遷移したことのあるフェーズ名（現在のフェーズ含む）。未指定時は全フェーズ
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskPhase"
      - name: previous_phase_stage
        in: query
        description: そのタスクがこれまでに遷移したことのあるステージ（現在のステージ含む）。未指定時は全ステージ
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskPhaseStage"
      - name: rejected_only
        in: query
        description: 差し戻されたタスクだけを絞り込む時に、キーのみ指定します（値は無視されます）。
        required: false
        allowEmptyValue: true
        schema:
          type: string
      - name: auto_accepted_only
        in: query
        description: 「抜取検査の対象外となり、自動受入されたタスク」だけを絞り込む時に、キーのみ指定します（値は無視されます）。
        required: false
        allowEmptyValue: true
        schema:
          type: string
      - name: sort
        in: query
        description: |
          ソート順の指定。
          使用可能キーはtask_id、updated_datetime、number_of_rejections、phase、phase_stage、status、account_idのいずれかです。降順指定時は先頭に-(ハイフン)を付与します。
          複数指定時は,(カンマ)区切りで列挙します。複数キーを列挙した場合は、先頭から優先順位を割り振られます。
        required: false
        example: account_id,-updated_datetime
        schema:
          type: string
      - name: annotation
        in: query
        description: |
          アノテーションの絞り込み条件をJSON形式([AnnotationQuery](#section/AnnotationQuery))で指定したもの。指定した条件に合致するアノテーションを持つタスクを絞り込む際に指定する。
        required: false
        example: '{"label_id":"b048c6b3-b36f-4c8d-97ea-96828a50a44c"}'
        schema:
          type: string
      responses:
        "200":
          description: 指定された条件にあてはまるタスクを返します。条件にあてはまるタスクが多数に及ぶことがあるので、すべての結果を得るにはページングしてください。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/TaskList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
      - af-task
      summary: タスク一括更新
      description: |
        タスクを一括更新します。

        リクエストボディは、1個以上の「操作」オブジェクトを含むJSON配列になります。
        操作オブジェクトには、現在「削除」の1通りのみがあります。
        これら操作オブジェクトを複数含めることで、1リクエストで複数の削除ができます。

        複数の操作のうち、1つでも失敗するとAPIのレスポンス全体としては失敗になります。 成功した部分までは反映されます。
      security:
      - ProjectOwner: []
      operationId: batchUpdateTasks
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "swagger-api-components.yaml#/components/schemas/BatchTaskRequestItem"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          # TODO Error定義構造化(KRSANNOFAC-1502)
          description: 停止中プロジェクトに対する操作のため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Errors"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/generate-tasks:
    post:
      tags:
      - af-task
      summary: タスク一括作成
      description: |
        典型的なタスク作成ルールにもとづいた、一括作成を行うAPIです。

        タスク作成ルールは、リクエストペイロードの `task_generate_rule` フィールドで指定できます。<br>
        `ByCount` を指定した場合、1つのタスクに割りあてる入力データの個数を指定してタスクを生成します。この作成ルールは、画像を同じ枚数均等にタスクに割り振りたい場合に便利です。<br>
        `ByDirectory` を指定した場合、入力データ名をファイルパスに見立て、ディレクトリ単位でタスクを生成します。この作成ルールは、動画などから切り出した画像をディレクトリ別に格納し、、その動画（ディレクトリ）の単位でタスクを作りたい場合に便利です。
        `ByInputDataCsv` を指定した場合、入力データを各タスクに割り振ったCSVへのS3パスを指定してタスクを生成できます。この作成ルールは特定のデータの組み合わせを持ったタスクを作成したい場合に便利です。<br>

        本APIを実行すると、バックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`gen-tasks`）。

        #### ByDirectory: ディレクトリ単位でのタスク一括生成の使い方
        例えば、次のような `input_data_name_` の入力データが登録されているとします。

        * a.zip/dir1/image1.png
        * a.zip/dir1/image2.png
        * a.zip/dir1/subdir/image3.png
        * a.zip/dir1/subdir/image4.png
        * a.zip/dir1/subdir/image5.png
        * b.zip/dir2/subdir1/image6.png
        * b.zip/dir2/subdir1/image7.png
        * b.zip/dir2/subdir1/image8.png
        * b.zip/dir2/subdir2/image9.png
        * b.zip/dir2/subdir2/image10.png

        ここで、`input_data_name_prefix`フィールド に `a.zip` を指定すると、次の2タスクが生成されます。

        1. タスク: `{task_id_prefix}_a.zip_dir1`
          * a.zip/dir1/image1.png
          * a.zip/dir1/image2.png
        2. タスク: `{task_id_prefix}_a.zip_dir1_subdir`
          * a.zip/dir1/subdir/image3.png
          * a.zip/dir1/subdir/image4.png
          * a.zip/dir1/subdir/image5.png

        次に、`input_data_name_prefix` に `b.zip/dir2` を指定すると、次の2タスクが生成されます。

        1. タスク: `{task_id_prefix}_b.zip_dir2_subdir1`
          * b.zip/dir2/subdir1/image6.png
          * b.zip/dir2/subdir1/image7.png
          * b.zip/dir2/subdir1/image8.png
        2. タスク: `{task_id_prefix}_b.zip_dir2_subdir2`
          * b.zip/dir2/subdir2/image9.png
          * b.zip/dir2/subdir2/image10.png

        `input_data_name_prefix` が未指定の時は、全ディレクトリごとにタスクが作成されます。つまり次のように4つのタスクが生成されます。

        1. タスク: `{task_id_prefix}_a.zip_dir1`
          * a.zip/dir1/image1.png
          * a.zip/dir1/image2.png
        2. タスク: `{task_id_prefix}_a.zip_dir1_subdir`
          * a.zip/dir1/subdir/image3.png
          * a.zip/dir1/subdir/image4.png
          * a.zip/dir1/subdir/image5.png
        3. タスク: `{task_id_prefix}_b.zip_dir2_subdir1`
          * b.zip/dir2/subdir1/image6.png
          * b.zip/dir2/subdir1/image7.png
          * b.zip/dir2/subdir1/image8.png
        4. タスク: `{task_id_prefix}_b.zip_dir2_subdir2`
          * b.zip/dir2/subdir2/image9.png
          * b.zip/dir2/subdir2/image10.png

        画像プロジェクトの場合、タスクに割り当てられる「ディレクトリ内の入力データ」の順序は、名前の昇順となります。<br>
        動画プロジェクトの場合、タスクに割り当てられる「ディレクトリ内の入力データ」の順序は、動画の入力データが先頭に来るようにソートされたうえで、名前の昇順となります。

        **注意:** `ByDirectory`では、入力データ名がファイルパス形式になっていない入力データはタスクの作成対象になりません。
        例えば、`foo/bar.png` はタスクの作成対象になりますが、ディレクトリを含まない`bar.png` や、最後がディレクトリになっている`foo/bar.png/` は対象になりません。

        **注意:** 動画プロジェクトの場合、ディレクトリに含まれる動画の入力データは一つに制限してください。
        これが守られない場合、作成されたタスクで動画を再生できない場合があります。

        #### ByInputDataCsv: CSVによるタスク一括生成の使い方
        以下のように「タスクID,入力データ名,入力データID」を1行毎に指定したCSVを作成します。

        ```
        task_1,a001.jpg,ca0cb2f9-fec5-49b4-98df-dc34490f9785
        task_1,a002.jpg,5ac1987e-ca7c-42a0-9c19-b5b23a41836b
        task_1,centinel.jpg,81d6407b-2172-4fa8-8525-2e43c49267ee
        task_2,b001.jpg,4f2ae4d0-7a38-4f9a-be6f-170ba76aba73
        task_2,b002.jpg,45ac5852-f20c-4938-9ee9-cc0274401df7
        task_2,centinel.jpg,81d6407b-2172-4fa8-8525-2e43c49267ee
        task_3,c001.jpg,3260c7a0-4820-424d-a26e-db7e91dbc139
        task_3,centinel.jpg,81d6407b-2172-4fa8-8525-2e43c49267ee
        ```
        CSVのエンコーディングは UTF-8(BOM付き)、UTF-8(BOMなし)、UTF-16(BOM付きLE) のいずれかのみ対応しています。

        **注意:** 動画プロジェクトの場合、一つのタスクに含まれる動画の入力データは一つに制限し、動画の入力データの位置は先頭にしてください。
        これが守られない場合、作成されたタスクで動画を再生できない場合があります。

        [createTempPath](#operation/createTempPath) APIを使ってアップロード用のURLとS3パスを取得してCSVをアップロードした上で`csv_data_path` フィールドに取得したS3パスを記述します。
      security:
      - ProjectOwner: []
      operationId: initiateTasksGeneration
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: v
        in: query
        description: |
          APIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：Project
          - "2"：TaskGenerateResponse
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/TaskGenerateRequest"
      responses:
        "202":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/TaskGenerateResponseWrapper"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "409":
          description: 停止中プロジェクトに対する操作のため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}:
    get:
      tags:
      - af-task
      summary: タスク取得
      description: |
        個々のタスクの情報を取得します。

        タスクを割り当てる場合は、[タスク割当](#operation/startTask)を使います。
      security:
      - AllProjectMember: []
      operationId: getTask
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: 停止中プロジェクトに対する操作のため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-task
      summary: タスク作成/更新
      description: |
        1つのタスクを作成または更新します。
        複数のタスクを一括生成する場合は、効率のよい[一括作成API](#operation/initiateTasksGeneration)を検討してください。

        このAPIで変更できるのは、タスクの入力データ（`input_data_list`）のみです。タスクに割り当てた画像や動画などの入力データを差し替えることができます。

        タスクの担当者やステータスを変更するには、[タスク割当](#operation/startTask)や[タスクの状態遷移](#operation/operateTask)を使用します。
      security:
      - ProjectOwner: []
      operationId: putTask
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: |
          タスクID。[値の制約についてはこちら。](#section/API-Convention/APIID)
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/TaskRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "409":
          description: 停止中プロジェクトに対する操作のため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-task
      summary: タスク削除
      description: |
        不要になったタスクや、間違って投入したタスクを削除します。教師データなどは削除せず残すので、あとから復元することも可能です。
      security:
      - ProjectOwner: []
      operationId: deleteTask
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      responses:
        "200":
          description: 正常。削除したタスクを返します
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/assign-tasks:
    post:
      tags:
        - af-task
      summary: タスク割当
      description: |
        メンバーもしくは自身にタスクを割当します。

        個々のタスクの情報を取得する場合は、[タスク取得](#operation/getTask)を使います。
      security:
        - AllProjectMember: []
      operationId: assignTasks
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/TaskAssignRequest"
      responses:
        "200":
          description: 正常。割当したタスクを返します。
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: プロジェクトが停止中のため、タスクの割当ができない。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/operate:
    post:
      tags:
      - af-task
      summary: タスク状態変更
      description: |
        タスクの状態、もしくはタスクの担当者を変更することができます。

        #### ユースケースごとの使い方

        * タスクを作業中(working)にしたい場合
          * 制約
            * 現在タスクを担当しているユーザーのみ、この操作を行うことができます。
            * 現在の状態が未着手(not_started)、休憩中(break)、保留(on_hold)のいずれかであるタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "working", account_id: "自身(現在のタスク担当者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクを休憩中にしたい場合
          * 制約
            * 現在タスクを担当しているユーザーのみ、この操作を行うことができます。
            * 現在の状態が作業中(working)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "break", account_id: "自身(現在のタスク担当者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクを保留(on_hold)にしたい場合
          * 制約
            * 現在タスクを担当しているユーザーのみ、この操作を行うことができます。
            * 現在の状態が作業中(working)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "on_hold", account_id: "自身(現在のタスク担当者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクを提出(complete)したい場合
          * 制約
            * 現在タスクを担当しているユーザーのみ、この操作を行うことができます。
            * 現在の状態が作業中(working)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "complete", account_id: "自身(現在のタスク担当者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクの提出を取消し(cancelled)したい場合
          * 制約
            * タスクを提出したユーザーのみ、この操作を行うことができます。
            * タスク提出後に検査/受入(抜取含む)等の作業が一切行われていない場合のみ、この操作を行うことができます。
            * 現在の状態が未着手(not_started)のタスクに対してのみ、この操作を行うことができます。
            * 現在のフェーズが検査(inspection)、もしくは受入(acceptance)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "cancelled", account_id: "自身(タスク提出者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクを差戻し(rejected)したい場合
          * 制約
            * 現在タスクを担当しているユーザーのみ、この操作を行うことができます。
            * 現在の状態が作業中(working)のタスクに対してのみ、この操作を行うことができます。
            * 現在のフェーズが検査(inspection)、もしくは受入(acceptance)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "rejected", account_id: "自身(現在のタスク担当者)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
          * タスクを強制差戻し(force rejected)したい場合
            * 強制差戻しについて
              * タスクの状態・フェーズを無視して、フェーズを教師付け(annotation)に、状態を未作業(not started)に変更します。
              * タスクの担当者としては、直前の教師付け(annotation)フェーズの担当者を割り当てます。
              * この差戻しは差戻しとして扱われず、抜取検査・抜取受入のスキップ判定に影響を及ぼしません。
            * 制約
              * プロジェクトオーナー(owner)のみ、この操作を行うことができます。
              * 現在のタスクの状態、フェーズを問わず、この操作を行うことができます。
            * リクエストボディのJSONサンプル
              * ```{ status: "rejected", account_id: "自身(プロジェクトオーナー)のアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00", force: true }```
        * タスクの受入完了を取り消したい場合
          * 制約
            * プロジェクトオーナー(owner)のみ、この操作を行うことができます。
            * 現在の状態が完了(completed)のタスクに対してのみ、この操作を行うことができます。
            * 現在のフェーズが受入(acceptance)のタスクに対してのみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "not_started", account_id: "再度受入を担当させたいアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクの担当者を変更したい場合
          * 制約
            * プロジェクトオーナー(owner)、もしくは受入担当者(accepter)のみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "not_started", account_id: "現在のフェーズを担当できるアカウントID", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
        * タスクの担当者を未割当てにしたい場合
          * 制約
            * プロジェクトオーナー(owner)、もしくは受入担当者(accepter)のみ、この操作を行うことができます。
          * リクエストボディのJSONサンプル
            * ```{ status: "not_started", last_updated_datetime: "2018-08-14T19:01:51.775+09:00"}```
      security:
      - AllProjectMember: []
      operationId: operateTask
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/TaskOperation"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Task"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: 指定された現在の状態が実際の現在の状態と食い違っている
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorStateMismatch"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/validation:
    get:
      deprecated: true
      tags:
      - af-task
      summary: タスク自動検査
      description: |
        指定したタスクの自動検査で見つかった警告やエラーを一括で取得します。
        [タスクの状態遷移](#operation/operateTask)の際に検査を行うようになったので、本APIは非推奨となります。
      security:
      - AllProjectMember: []
      operationId: getTaskValidation
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/TaskValidation"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/histories:
    get:
      tags:
      - af-task
      summary: タスク履歴一括取得
      description: |
        指定されたタスクの作業履歴をすべて取得します。
      security:
      - AllProjectMember: []
      operationId: getTaskHistories
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/TaskHistory"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/annotations:
    get:
      tags:
      - af-annotation
      summary: アノテーション一括取得
      description:
        指定したタスク-入力データにつけられたアノテーションを一括で取得します。
      security:
      - AllProjectMember: []
      operationId: getAnnotationList
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: page
        in: query
        description: 検索結果のうち、取得したいページの番号(1始まり）
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: 1ページあたりの取得するデータ件数
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 200
          default: 30
      - name: aggregate_by_task_and_input
        in: query
        description: trueを指定した場合に「タスクIDと入力IDの組」ごとに検索結果を集計するようにする。
        required: false
        schema:
          type: boolean
          default: false
      - name: query
        in: query
        description: |
          絞り込み条件([AnnotationQuery](#section/AnnotationQuery))をJSON形式で表した文字列。
        required: false
        example: '{"label_id":"b048c6b3-b36f-4c8d-97ea-96828a50a44c"}'
        schema:
          type: string
      - name: sort
        in: query
        description: |
          ソート順の指定。
          使用可能キーはtask_id, input_data_id, detail.annotation_id, detail.account_id, detail.label_id, detail.data_holding_type, detail.created_datetime, detail.updated_datetimeのいずれかです。降順指定時は先頭に-(ハイフン)を付与します。
          複数指定時は,(カンマ)区切りで列挙します。複数キーを列挙した場合は、先頭から優先順位を割り振られます。
        required: false
        example: task_id,input_data_id,detail.annotation_id,-detail.updated_datetime
        schema:
          type: string
      responses:
        "200":
          description: 指定された条件にあてはまるアノテーションを返します。条件にあてはまるアノテーションが多数に及ぶことがあるので、すべての結果を得るにはページングしてください。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/AnnotationList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
      - af-annotation
      summary: アノテーション一括更新
      description: |
        複数のアノテーションを一括更新します。

        リクエストボディは、1個以上の「操作」オブジェクトを含むJSON配列になります。
        操作オブジェクトには、「更新」と「削除」の2通りがあり、それぞれJSONオブジェクト構造が異なります。
        これら操作オブジェクトを複数含めることで、1リクエストで複数の更新や削除ができます。

        **現時点で、このAPIは複数のアノテーションを修正するためのもので、新しいアノテーションを作成することはできません**。
        新しいアノテーションを更新や削除の対象に指定した場合、無視されます。

        既に作成済みのアノテーションのうち、リクエストボディの配列に含まれないアノテーションは更新されません。

        更新対象のアノテーションのうち、属性配列に含まれない属性は更新されません。

        更新対象のアノテーションのラベルを変更する場合、異なるアノテーション種別のラベルに変更することはできません。
        また、変更後のラベルに含まれない属性は削除されます。

        画像全体のアノテーションは、他のラベルに変更することはできません。

        塗りつぶしv2アノテーションは、1ラベル1アノテーションの制約のため、他の塗りつぶしv2ラベルに変更することはできません。

        複数の操作のうち、1つでも失敗するとAPIのレスポンス全体としては失敗になります。 成功した部分までは反映されます。

        受入が完了しているタスクのアノテーション更新を含む場合、オーナー以上の権限が必要になります。
      security:
      - ProjectAccepter: []
      operationId: batchUpdateAnnotations
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "swagger-api-components.yaml#/components/schemas/BatchAnnotationRequestItem"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/SingleAnnotation"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          # TODO Error定義構造化(KRSANNOFAC-1502)
          description: 停止中プロジェクトに対する操作、または、先に更新されているため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Errors"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/inputs/{input_data_id}/annotation:
    get:
      tags:
        - af-annotation
      summary: タスク/入力データのアノテーション一括取得
      description: |
        [putAnnotation](#operation/putAnnotation)が要求する構造のアノテーションを取得します。
        このAPIは、[putAnnotation](#operation/putAnnotation)をより利用しやすくする目的で提供しています。
        機械学習などで利用する成果物としてのアノテーションを取得するには、以下をご利用いただけます。

        * [getAnnotation](#operation/getAnnotation): 特定のタスク - 入力データのアノテーション取得
        * [getAnnotationArchive](#operation/getAnnotationArchive): プロジェクト全体のアノテーション（ZIP）
      security:
        - AllProjectMember: []
      operationId: getEditorAnnotation
      parameters:
        - name: project_id
          in: path
          description: プロジェクトID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
        - name: task_id
          in: path
          description: タスクID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
        - name: input_data_id
          in: path
          description: 入力データID
          required: true
          schema:
            $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Annotation"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-annotation
      summary: タスク-入力データのアノテーション更新
      description: |
        「過去に誰にも割り当てられていないタスクに含まれる入力データ」に限り、プロジェクトオーナーであればアノテーションを更新できます。
        この挙動は、[AnnoFab外部で作成されたアノテーションをインポート](/docs/tutorial/tutorial-ex-importing-annotation.html) する目的にも利用できます。

        １度でも誰かに割り当てられたタスクは、タスクの現在の担当者であればアノテーションを更新できます。
        タスクの現在の担当者でない場合、エラーになります。
        この制限は、アノテーション作業中の予期せぬ同時編集を防ぐためです。

        `is_protected`（保護） を `true` にすることで、アノテーションをアノテーションエディタ上での削除から保護できます。
        属性の変更もさせたくない場合は、アノテーション仕様で特定の属性を読取専用にすることで保護できます。保護は、

        * 外部からインポートしたアノテーション
        * 別プロジェクトからコピーしたアノテーション

        などを誤って削除したくないときに便利です。
        `is_protected`は、プロジェクトオーナーのみ変更可能です。

        なお、本APIでは `is_protected` によらず、更新や削除が可能です。
      security:
      - AllProjectMember: []
      operationId: putAnnotation
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/Annotation"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Annotation"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          # TODO Error定義構造化(KRSANNOFAC-1502)
          description: 停止中プロジェクトに対する操作、または、先に更新されているため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Errors"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/inputs/{input_data_id}/annotation/simple:
    get:
      tags:
      - af-annotation
      summary: タスク-入力データのSimpleアノテーション一括取得
      description: |
        指定したタスク - 入力データにつけられたアノテーションを一括で取得します。
        Simple版のアノテーションJSONは、機械学習の一般的な利用で扱いやすい構造になっています。

        なお、プロジェクト全体のアノテーションを一括で取得したい場合には、 [getAnnotationArchive](#operation/getAnnotationArchive) APIを使用することもできます。
      security:
      - AllProjectMember: []
      operationId: getAnnotation
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/SimpleAnnotation"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/archive/full:
    get:
      tags:
      - af-annotation
      summary: FullアノテーションZIP取得
      description: |
        プロジェクト内のアノテーション（Full版）がまとめられたZIPを取得するための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        FullアノテーションZIPのデータ構造については、 [Full Annotation ZIP](#section/Full-Annotation-ZIP) を参照ください。
      security:
      - ProjectDataUser: []
      operationId: getArchiveFullWithProId #getFullAnnotationArchiveByProjectId
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/archive/simple:
    get:
      tags:
      - af-annotation
      summary: SimpleアノテーションZIP取得
      description: |
        プロジェクト内のアノテーション（Simple版）がまとめられたZIPを取得するための、認証済み一時URLを取得します。
        取得したURLは1時間で失効し、アクセスできなくなります。

        SimpleアノテーションZIPのデータ構造については、 [Simple Annotation ZIP](#section/Simple-Annotation-ZIP) を参照ください。

        なお、特定のタスクのSimpleアノテーションを取得したい場合には、 [getAnnotation](#operation/getAnnotation) APIを使用することもできます。
      security:
      - ProjectDataUser: []
      operationId: getAnnotationArchive
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "201":
          $ref: "swagger-api-components.yaml#/components/responses/FileRedirectResponse"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/archive/update:
    post:
      tags:
      - af-annotation
      summary: アノテーションZIP更新開始
      description: |
        プロジェクト内のアノテーションZIP（Simple版とFull版の両方）の更新を開始します。
        ZIPの更新は、データ量に応じて数分〜数十分かかります。

        アノテーションZIPは毎日AM 03:00 JSTごろに自動更新されますが、本APIを用いると、自動更新を待たずに更新を要求できます。

        本APIを実行すると、バックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`gen-annotation`）。

      security:
      - ProjectDataUser: []
      operationId: postAnnotationArchiveUpdate
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: v
        in: query
        description: |
          APIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：Message
          - "2"：PostAnnotationArchiveUpdateResponse
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      responses:
        "202":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/PostAnnotationArchiveUpdateResponseWrapper"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/tasks/{task_id}/inputs/{input_data_id}/inspections:
    get:
      tags:
      - af-inspection
      summary: 検査コメント一括取得
      description: |
        指定されたタスクで、指定された入力データにつけられた検査コメントをすべて取得します。
      security:
      - AllProjectMember: []
      operationId: getInspections
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/Inspection"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
      - af-inspection
      summary: 検査コメント一括更新
      description: |
        検査コメントを一括更新します。
        タスクの現在の担当者でない場合、またはタスクの状態が「作業中」でない場合は409エラーになります。

        リクエストボディは、1個以上の「操作」オブジェクトを含むJSON配列になります。
        操作オブジェクトには、「更新（作成含む）」と「削除」の2通りがあり、それぞれJSONオブジェクト構造が異なります。
        これら操作オブジェクトを複数含めることで、1リクエストで複数の更新や削除ができます。

        既に作成済みの検査コメントのうち、リクエストボディの配列に含まれないものは更新されません。

        複数の操作のうち、1つでも失敗するとAPIのレスポンス全体としては失敗になります。 成功した部分までは反映されます。
      security:
      - AllProjectMember: []
      operationId: batchUpdateInspections
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: task_id
        in: path
        description: タスクID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/TaskId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "swagger-api-components.yaml#/components/schemas/BatchInspectionRequestItem"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/Inspection"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          # TODO Error定義構造化(KRSANNOFAC-1502)
          description: 停止中プロジェクトに対する操作、または、先に更新されているため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Errors"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/inputs:
    get:
      tags:
      - af-input
      summary: 入力データ一括取得
      description: |
        指定されたプロジェクトの入力データを検索します。

        パフォーマンスのため、結果はページング形式で返ります。全件取得したい場合は、レスポンスを見て、ページ移動してください。
      security:
      - AllProjectMember: []
      operationId: getInputDataList
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: query
        description: 入力データIDでの部分一致検索で使用。1文字以上あれば使用します。
        required: false
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      - name: input_data_name
        in: query
        description: 入力データ名での部分一致検索で使用。1文字以上あれば使用します。
        required: false
        schema:
          type: string
      - name: input_data_path
        in: query
        description: 入力データパスでの部分一致検索で使用。1文字以上あれば使用します。
        required: false
        schema:
          type: string
      - name: task_id
        in: query
        description: 入力データが紐づくタスクIDの部分一致検索で使用。1文字以上あれば使用します。条件に合致した先頭100件のタスクに使われている入力データを検索します。
        required: false
        schema:
          type: string
      - name: from
        in: query
        description: 更新日時での範囲検索で使用（ISO 8601 拡張形式）
        required: false
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        description: 更新日時での範囲検索で使用（ISO 8601 拡張形式）
        required: false
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        description: 検索結果のうち、取得したいページの番号(1始まり）
        required: false
        schema:
          type: integer
          minimum: 1
          default: 1
      - name: limit
        in: query
        description: 1ページあたりの取得するデータ件数
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 200
          default: 30
      responses:
        "200":
          description: 指定された条件にあてはまる入力データを返します。条件にあてはまる入力データが多数に及ぶことがあるので、すべての結果を得るにはページングしてください。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputDataList"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    post:
      tags:
      - af-input
      summary: 入力データ一括更新
      description: |
        入力データを一括更新します。

        リクエストボディは、1個以上の「操作」オブジェクトを含むJSON配列になります。
        操作オブジェクトには、現在「削除」の1通りのみがあります。
        これら操作オブジェクトを複数含めることで、1リクエストで複数の削除ができます。

        複数の操作のうち、1つでも失敗するとAPIのレスポンス全体としては失敗になります。 成功した部分までは反映されます。
      security:
      - ProjectOwner: []
      operationId: batchUpdateInputs
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "swagger-api-components.yaml#/components/schemas/BatchInputDataRequestItem"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/InputData"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          # TODO Error定義構造化(KRSANNOFAC-1502)
          description: 停止中プロジェクトに対する操作のため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Errors"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/inputs/{input_data_id}:
    get:
      tags:
      - af-input
      summary: 入力データ取得
      description: |
        指定された入力データを取得します。

        この API の返す入力データは入力データ名などの項目を含む JSON であり、実体のファイル（画像や動画など）ではありません。
        実体ファイルにアクセスする方法は非公開です（詳細を希望される場合はお問い合わせください）。
      security:
      - AllProjectMember: []
      operationId: getInputData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputData"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-input
      summary: |
        入力データ更新
      description: |
        入力データ（画像プロジェクトなら画像、動画プロジェクトなら動画や時系列データ）を登録します。

        ファイルの登録には、[アップロード用一時データ保存先作成API](#operation/createTempPath) を組み合わせて使用します。

        ## ZIPでまとめてアップロード

        画像プロジェクトの場合、複数の画像ファイルをZIPでまとめてアップロードできます。ZIPは最大5GB、UTF-8エンコーディングのみ対応しています。<br>
        アノテーション作業生産性を高めるため、画像は「長辺4096px以内」かつ「4MB以内」になるよう縮小されます。<br>
        作成されるアノテーションは、元の解像度でつけた場合相当に自動で復元されます。

        動画プロジェクトの場合、複数の動画ファイルをZIPでまとめてアップロードできます。ZIPは最大5GB、UTF-8エンコーディングのみ対応しています。<br>
        また、複数のストリーミング形式の動画をアップロードすることもできます。<br>
        この場合はZIP形式必須で、同一のZIPファイル内にm3u8ファイルとtsファイルを両方含めてください。<br>
        なお、このm3u8ファイルに記述された相対パスでtsファイルが参照可能である必要があります。

        ZIPファイルを登録するとバックグラウンドジョブが登録されます。ジョブは [getProjectJob](#operation/getProjectJob) APIで確認できます（ジョブ種別は`gen-inputs`）。

        ### ディレクトリ例
        ```
          hoge.zip/
            hoge.ts
            fuga/
              foo.m3u8(hoge.ts, fuga/foo1.ts, fuga/foo2.tsを参照)
              foo1.ts
              foo2.ts
            piyo1/
              piyo2/
                bar.ts
              bar.m3u8(hoge.ts, piyo1/piyo2/bar.tsを参照)
        ```

        ## 注意事項

        * `input_data_path` のスキーマが `https` の場合、 `input_data_name` もしくは `input_data_path` の末尾にファイルの拡張子を含むようにしてください
            * `input_data_name`  の値が優先されます
        * `input_data_path` のスキーマが `s3` かつ入力データがtsファイルの場合、 `input_data_name` もしくは `input_data_path` の末尾にファイルの拡張子を含むようにしてください
            * `input_data_name`  の値が優先されます

      security:
      - ProjectOwner: []
      operationId: putInputData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: |
          入力データID。[値の制約についてはこちら。](#section/API-Convention/APIID)
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      - name: v
        in: query
        description: |
          zipファイルを受領時のAPIの戻り型のバージョンを指定します。
          値と戻り型の対応は以下です。
          - "1"：登録処理を開始した旨の固定メッセージ
          - "2"：JobInfo
        required: false
        schema:
          type: string
          default: "1"
          example: "2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/InputDataRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputData"
        "202":
          description: zipファイルを受領、バッチにて登録開始。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/MessageOrJobInfo"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "409":
          description: 先に更新されているため失敗
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/ErrorAlreadyUpdated"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-input
      summary: 入力データ削除
      description: |
        入力データを削除します。

        入力データの実体ファイルが AnnoFab のストレージに存在するものであれば、実体ファイルも削除されます。
        お客様の管理するプライベートストレージに存在するものであれば、実体ファイルは削除されません。
      security:
      - ProjectOwner: []
      operationId: deleteInputData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常。削除した入力データを返します
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InputData"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "403":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorForbiddenResource"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/inputs/{input_data_id}/data:
    get:
      deprecated: true
      tags:
      - af-input
      summary: 実体参照用認証済みURL取得
      description: |
        入力データの実体（画像や動画などのファイルそのもの）にアクセスするための、認証済み一時URLを取得します。

        取得したURLは、1時間で失効し、アクセスできなくなります。
      security:
      - AllProjectMember: []
      operationId: getSignedUrlOfInputData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          headers:
            Location:
              description: 認証済み一時URL
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
                description: 認証済み一時URL
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/inputs/{input_data_id}/supplementary-data:
    get:
      tags:
      - af-supplementary
      summary: 補助情報一括取得
      description: |
        指定された入力データにつけられた補助情報をすべて取得します。
      security:
      - AllProjectMember: []
      operationId: getSupplementaryDataList
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/SupplementaryData"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/inputs/{input_data_id}/supplementary-data/{supplementary_data_id}:
    put:
      tags:
      - af-supplementary
      summary: 補助情報作成/更新
      description: |
        指定された入力データに補助情報を新規作成または更新します。
      security:
      - ProjectOwner: []
      operationId: putSupplementaryData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      - name: supplementary_data_id
        in: path
        description: 補助情報ID（プロジェクトIDとの2つ組で一意となる値）
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/SupplementaryDataId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/SupplementaryDataRequest"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/SupplementaryData"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    delete:
      tags:
      - af-supplementary
      summary: 補助情報削除
      description: |
        指定された補助情報を、実体ファイルとともに削除します。
      security:
      - ProjectOwner: []
      operationId: deleteSupplementaryData
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: input_data_id
        in: path
        description: 入力データID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/InputDataId"
      - name: supplementary_data_id
        in: path
        description: 補助情報ID（プロジェクトIDとの2つ組で一意となる値）
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/SupplementaryDataId"
      responses:
        "200":
          description: 正常
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/create-temp-path:
    post:
      tags:
      - af-input
      summary: 一時データ保存先取得
      description: |
        「複数の入力データを圧縮したZIPファイル」や「4MBを超える画像」などをAnnoFabに一時的に保存するための、URLと登録用データパスを発行します。

        このAPIと他のAPIを以下に示すように使うことで、ZIPファイルなどをAFにアップロードできます。


        1. 本APIを実行して、URLを取得する。
          * `curl -X POST -H 'Content-Type: {CONTENT_TYPE_HERE}' 'https://annofab.com/api/v1/projects/{project_id}/create-temp-path'`
        2. 1で取得したURLに、一時保存したいファイルをPUTする。
          * `curl -X PUT -H 'Content-Type: {CONTENT_TYPE_HERE}' --data-binary @/hoge.zip 'https://{発行されたURL}'`
        3. 1で取得した登録用データパスを [入力データ登録API](#operation/putInputData)のリクエストボディ `input_data_path` に指定する。
          * `curl -X PUT -H 'Content-Type: text/json' -d '{"input_data_name":"{表示名}", "input_data_path":"{登録用データパス}" }' 'https://annofab.com/api/v1/projects/{project_id}/inputs/{input_data_id}'`

        ここで、1と2で `CONTENT_TYPE_HERE` は必ず一致しなければいけません。
        ZIPファイルの場合は `application/zip` 、画像ファイルの場合は `image/png` など、適切な Content-Type を指定します。

        登録するファイルはどのような内容であれ、アップロードから24時間経過すると削除されます。
        したがって、ZIP圧縮した入力データを登録する場合は、URL発行から24時間以内に完了してください。
      security:
      - AllProjectMember: []
      operationId: createTempPath
      parameters:
      - in: header
        name: Content-Type
        schema:
          type: string
        example: "application/zip"
        description: |
          アップロードしたいファイルの Content-Type を指定します。
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: |
            何らかのファイルをAnnoFabに一時的に保存するためのアップロード先URL
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/DataPath"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/instruction:
    get:
      tags:
      - af-instruction
      summary: 作業ガイドの取得
      description: |
        指定された版の作業ガイドのHTMLを取得します。
      security:
      - AllProjectMember: []
      operationId: getInstruction
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: history_id
        in: query
        description: 取得する版の履歴ID
        required: true
        schema:
          type: string
        example: "ed55914c-9f04-470e-8af2-373c8def3e8b"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/Instruction"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
    put:
      tags:
      - af-instruction
      summary: 作業ガイドの更新
      description: |
        作業ガイドのHTMLを更新します。
      security:
      - ProjectOwner: []
      - ProjectAccepter: []
      operationId: putInstruction
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "swagger-api-components.yaml#/components/schemas/Instruction"
      responses:
        "200":
          description: 作業ガイドの更新が成功した。
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InstructionHistory"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/instruction-history:
    get:
      tags:
      - af-instruction
      summary: 作業ガイドの編集履歴の取得
      description: |
        プロジェクトの作業ガイドの編集履歴を取得します。
        取得される編集履歴は日付の新しい順にソートされます。
      security:
      - AllProjectMember: []
      operationId: getInstructionHistory
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: limit
        in: query
        description: 取得する編集履歴の件数
        required: false
        schema:
          type: integer
          minimum: 30
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/InstructionHistory"
        "400":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorInvalidRequest"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/instruction-images:
    get:
      tags:
      - af-instruction
      summary: 作業ガイドの画像一覧の取得
      description: |
        プロジェクトの作業ガイドの画像一覧を取得します。
      security:
      - AllProjectMember: []
      operationId: getInstructionImages
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "swagger-api-components.yaml#/components/schemas/InstructionImage"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/instruction-images/{image_id}:
    delete:
      tags:
      - af-instruction
      summary: 作業ガイドの画像削除
      description: |
        プロジェクトの作業ガイドの画像を削除します。
      security:
      - ProjectOwner: []
      - ProjectAccepter: []
      operationId: deleteInstructionImage
      parameters:
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: image_id
        in: path
        description: 作業ガイド画像ID
        required: true
        schema:
          type: string
        example: "ed55914c-9f04-470e-8af2-373c8def3e8b"
      responses:
        "200":
          description: 正常
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
  /projects/{project_id}/instruction-images/{image_id}/put-url:
    get:
      tags:
      - af-instruction
      summary: 作業ガイドの画像登録・更新用URL取得
      description: |
        プロジェクトの作業ガイドの画像を登録するためのput先URLを取得します。

        リクエストヘッダには、登録する画像に応じた適切な Content-Type を指定してください。


        作業ガイド画像の登録/更新方法は以下の通りです。
        1. `getInstructionImageUrlForPut` APIを実行して、ファイルアップロード用のURLを取得する。
          * `curl -X GET -H 'Content-Type: {CONTENT_TYPE_HERE}' 'https://annofab.com/api/v1/projects/{project_id}/instruction-images/{image_id}/put-url'`
        2. 手順1で取得したファイルアップロード用のURLに対して、登録/更新する作業ガイド画像ファイル(`hoge.jpg`)をPUTする。
          * `curl -X PUT -H 'Content-Type: {CONTENT_TYPE_HERE}' --data-binary @/hoge.jpg '{ファイルアップロード用のURL}'`

        手順1と2で `CONTENT_TYPE_HERE` は必ず一致しなければいけません。

      security:
      - ProjectOwner: []
      - ProjectAccepter: []
      operationId: getInstructionImageUrlForPut
      parameters:
      - in: header
        name: Content-Type
        schema:
          type: string
        example: "image/png"
        description: |
          登録する画像ファイルの Content-Type を指定します。
      - name: project_id
        in: path
        description: プロジェクトID
        required: true
        schema:
          $ref: "swagger-api-components.yaml#/components/schemas/ProjectId"
      - name: image_id
        in: path
        description: 作業ガイド画像ID
        required: true
        schema:
          type: string
        example: "ed55914c-9f04-470e-8af2-373c8def3e8b"
      responses:
        "200":
          description: 正常
          content:
            application/json:
              schema:
                $ref: "swagger-api-components.yaml#/components/schemas/InstructionImagePath"
        "401":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnauthorizedApi"
        "404":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorMissingResource"
        "503":
          $ref: "swagger-api-components.yaml#/components/responses/ErrorUnderMaintenance"
