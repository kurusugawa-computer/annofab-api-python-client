"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from annofabapi.pydantic_models.inspection_statistics_phrases import InspectionStatisticsPhrases


class InspectionStatisticsBreakdown(BaseModel):
    """
    検査コメント数の集計結果
    """

    labels: Dict[str, InspectionStatisticsPhrases] = Field(description="ラベルに紐付いている検査コメントの集計結果。キーは`label_id`です。")
    no_label: InspectionStatisticsPhrases
    __properties: ClassVar[List[str]] = ["labels", "no_label"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InspectionStatisticsBreakdown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in labels (dict)
        _field_dict = {}
        if self.labels:
            for _key_labels in self.labels:
                if self.labels[_key_labels]:
                    _field_dict[_key_labels] = self.labels[_key_labels].to_dict()
            _dict["labels"] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of no_label
        if self.no_label:
            _dict["no_label"] = self.no_label.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InspectionStatisticsBreakdown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "labels": dict((_k, InspectionStatisticsPhrases.from_dict(_v)) for _k, _v in obj["labels"].items())
                if obj.get("labels") is not None
                else None,
                "no_label": InspectionStatisticsPhrases.from_dict(obj["no_label"]) if obj.get("no_label") is not None else None,
            }
        )
        return _obj
