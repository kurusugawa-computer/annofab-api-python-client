"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.internationalization_message import InternationalizationMessage


class AnnotationTypeFieldDefinitionOneStringField(BaseModel):
    """
    文字列の値をひとつだけ持つフィールドの定義
    """

    type: StrictStr = Field(alias="_type")
    title: Optional[InternationalizationMessage] = None
    prefix: Optional[StrictStr] = Field(default=None, description="フィールドの前に付与する文字列。 ")
    postfix: Optional[StrictStr] = Field(default=None, description="フィールドの後に付与する文字列 ")
    description: Optional[InternationalizationMessage] = None
    initial_value: Optional[StrictStr] = Field(default=None, description="フィールドの初期値 ")
    __properties: ClassVar[List[str]] = ["_type", "title", "prefix", "postfix", "description", "initial_value"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["OneStringField"]):
            raise ValueError("must be one of enum values ('OneStringField')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationTypeFieldDefinitionOneStringField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of title
        if self.title:
            _dict["title"] = self.title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict["description"] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationTypeFieldDefinitionOneStringField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "_type": obj.get("_type"),
                "title": InternationalizationMessage.from_dict(obj["title"]) if obj.get("title") is not None else None,
                "prefix": obj.get("prefix"),
                "postfix": obj.get("postfix"),
                "description": InternationalizationMessage.from_dict(obj["description"]) if obj.get("description") is not None else None,
                "initial_value": obj.get("initial_value"),
            }
        )
        return _obj
