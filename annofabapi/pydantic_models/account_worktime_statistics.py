"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.worktime_statistics_item import WorktimeStatisticsItem


class AccountWorktimeStatistics(BaseModel):
    """
    AccountWorktimeStatistics
    """

    account_id: StrictStr = Field(description="アカウントID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    by_tasks: List[WorktimeStatisticsItem] = Field(
        description="タスクごとに計算した「画像1枚あたりの作業時間平均」の統計（動画プロジェクトの場合は空リスト）"
    )
    by_inputs: List[WorktimeStatisticsItem] = Field(description="画像1枚あたりの作業時間情報（動画プロジェクトの場合は空リスト）")
    by_minutes: List[WorktimeStatisticsItem] = Field(description="動画1分あたりの作業時間情報（画像プロジェクトの場合は空リスト）")
    __properties: ClassVar[List[str]] = ["account_id", "by_tasks", "by_inputs", "by_minutes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountWorktimeStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in by_tasks (list)
        _items = []
        if self.by_tasks:
            for _item_by_tasks in self.by_tasks:
                if _item_by_tasks:
                    _items.append(_item_by_tasks.to_dict())
            _dict["by_tasks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in by_inputs (list)
        _items = []
        if self.by_inputs:
            for _item_by_inputs in self.by_inputs:
                if _item_by_inputs:
                    _items.append(_item_by_inputs.to_dict())
            _dict["by_inputs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in by_minutes (list)
        _items = []
        if self.by_minutes:
            for _item_by_minutes in self.by_minutes:
                if _item_by_minutes:
                    _items.append(_item_by_minutes.to_dict())
            _dict["by_minutes"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountWorktimeStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "account_id": obj.get("account_id"),
                "by_tasks": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["by_tasks"]] if obj.get("by_tasks") is not None else None,
                "by_inputs": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["by_inputs"]] if obj.get("by_inputs") is not None else None,
                "by_minutes": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["by_minutes"]] if obj.get("by_minutes") is not None else None,
            }
        )
        return _obj
