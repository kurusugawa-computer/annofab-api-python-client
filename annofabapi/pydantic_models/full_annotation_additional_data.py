"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.additional_data_definition_type import AdditionalDataDefinitionType
from annofabapi.pydantic_models.full_annotation_additional_data_value import FullAnnotationAdditionalDataValue
from annofabapi.pydantic_models.internationalization_message import InternationalizationMessage


class FullAnnotationAdditionalData(BaseModel):
    """
    属性情報
    """

    additional_data_definition_id: StrictStr = Field(description="属性ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    additional_data_definition_name: InternationalizationMessage
    type: AdditionalDataDefinitionType
    value: FullAnnotationAdditionalDataValue
    __properties: ClassVar[List[str]] = ["additional_data_definition_id", "additional_data_definition_name", "type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FullAnnotationAdditionalData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_data_definition_name
        if self.additional_data_definition_name:
            _dict["additional_data_definition_name"] = self.additional_data_definition_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict["value"] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FullAnnotationAdditionalData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "additional_data_definition_id": obj.get("additional_data_definition_id"),
                "additional_data_definition_name": InternationalizationMessage.from_dict(obj["additional_data_definition_name"])
                if obj.get("additional_data_definition_name") is not None
                else None,
                "type": obj.get("type"),
                "value": FullAnnotationAdditionalDataValue.from_dict(obj["value"]) if obj.get("value") is not None else None,
            }
        )
        return _obj
