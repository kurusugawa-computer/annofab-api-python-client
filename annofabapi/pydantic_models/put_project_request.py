"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.input_data_type import InputDataType
from annofabapi.pydantic_models.project_configuration_put import ProjectConfigurationPut
from annofabapi.pydantic_models.project_status import ProjectStatus


class PutProjectRequest(BaseModel):
    """
    PutProjectRequest
    """

    title: StrictStr = Field(description="プロジェクトのタイトル")
    overview: Optional[StrictStr] = Field(default=None, description="プロジェクトの概要")
    status: ProjectStatus
    input_data_type: Optional[InputDataType] = None
    organization_name: StrictStr = Field(
        description="プロジェクトの所属組織を変更する場合は、ここに変更先の組織名を指定します。  * 所属組織を変更する前にプロジェクトを停止する必要があります。 * APIを呼び出すアカウントは、変更先組織の管理者またはオーナーである必要があります。 * 変更後の組織に所属していないプロジェクトメンバーも残りますが、作業はできません。あらためて組織に招待してください。 "
    )
    configuration: ProjectConfigurationPut
    last_updated_datetime: Optional[str] = Field(default=None, description="新規作成時は未指定、更新時は必須（更新前の日時） ")
    force_suspend: Optional[StrictBool] = Field(default=False, description="作業中タスクがあるプロジェクトを停止する時trueにして下さい")
    __properties: ClassVar[List[str]] = [
        "title",
        "overview",
        "status",
        "input_data_type",
        "organization_name",
        "configuration",
        "last_updated_datetime",
        "force_suspend",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PutProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict["configuration"] = self.configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PutProjectRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "title": obj.get("title"),
                "overview": obj.get("overview"),
                "status": obj.get("status"),
                "input_data_type": obj.get("input_data_type"),
                "organization_name": obj.get("organization_name"),
                "configuration": ProjectConfigurationPut.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
                "last_updated_datetime": obj.get("last_updated_datetime"),
                "force_suspend": obj.get("force_suspend") if obj.get("force_suspend") is not None else False,
            }
        )
        return _obj
