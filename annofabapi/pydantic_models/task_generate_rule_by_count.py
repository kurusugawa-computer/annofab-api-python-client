"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self

from annofabapi.pydantic_models.input_data_order import InputDataOrder


class TaskGenerateRuleByCount(BaseModel):
    """
    1つのタスクに割り当てる入力データの個数を指定してタスクを生成します。
    """

    task_id_prefix: StrictStr = Field(description="タスクIDのプレフィックス。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    allow_duplicate_input_data: StrictBool = Field(
        description="`true`のときは、既にタスクに使われている入力データも、新しいタスクに割り当てます。`false`のときは、既にタスクに使われている入力データを除外します。まだタスクに使われていない入力データだけを、新しいタスクに割り当てます。 "
    )
    input_data_count: Annotated[int, Field(le=200, strict=True, ge=1)] = Field(
        description="1つのタスクに割り当てる入力データの個数。 動画プロジェクトでは必ず`1`を指定してください。 "
    )
    input_data_order: InputDataOrder
    type: Optional[StrictStr] = Field(default=None, description="`ByCount` [詳しくはこちら](#section/API-Convention/API-_type) ", alias="_type")
    __properties: ClassVar[List[str]] = ["task_id_prefix", "allow_duplicate_input_data", "input_data_count", "input_data_order", "_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskGenerateRuleByCount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskGenerateRuleByCount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "task_id_prefix": obj.get("task_id_prefix"),
                "allow_duplicate_input_data": obj.get("allow_duplicate_input_data"),
                "input_data_count": obj.get("input_data_count"),
                "input_data_order": obj.get("input_data_order"),
                "_type": obj.get("_type"),
            }
        )
        return _obj
