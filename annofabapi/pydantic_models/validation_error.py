"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.duplicated_segmentation_v2 import DuplicatedSegmentationV2
from annofabapi.pydantic_models.duplicated_v1 import DuplicatedV1
from annofabapi.pydantic_models.duplicated_v2 import DuplicatedV2
from annofabapi.pydantic_models.invalid_annotation_data import InvalidAnnotationData
from annofabapi.pydantic_models.invalid_choice import InvalidChoice
from annofabapi.pydantic_models.invalid_link_target import InvalidLinkTarget
from annofabapi.pydantic_models.invalid_value import InvalidValue
from annofabapi.pydantic_models.overlapped_range_annotation import OverlappedRangeAnnotation
from annofabapi.pydantic_models.unknown_additional_data import UnknownAdditionalData
from annofabapi.pydantic_models.unknown_label import UnknownLabel
from annofabapi.pydantic_models.unknown_link_target import UnknownLinkTarget

VALIDATIONERROR_ONE_OF_SCHEMAS = [
    "DuplicatedSegmentationV2",
    "DuplicatedV1",
    "DuplicatedV2",
    "InvalidAnnotationData",
    "InvalidChoice",
    "InvalidLinkTarget",
    "InvalidValue",
    "OverlappedRangeAnnotation",
    "UnknownAdditionalData",
    "UnknownLabel",
    "UnknownLinkTarget",
]


class ValidationError(BaseModel):
    """
    ValidationError
    """

    # data type: InvalidAnnotationData
    oneof_schema_1_validator: Optional[InvalidAnnotationData] = None
    # data type: DuplicatedSegmentationV2
    oneof_schema_2_validator: Optional[DuplicatedSegmentationV2] = None
    # data type: InvalidValue
    oneof_schema_3_validator: Optional[InvalidValue] = None
    # data type: UnknownLinkTarget
    oneof_schema_4_validator: Optional[UnknownLinkTarget] = None
    # data type: InvalidLinkTarget
    oneof_schema_5_validator: Optional[InvalidLinkTarget] = None
    # data type: InvalidChoice
    oneof_schema_6_validator: Optional[InvalidChoice] = None
    # data type: DuplicatedV1
    oneof_schema_7_validator: Optional[DuplicatedV1] = None
    # data type: DuplicatedV2
    oneof_schema_8_validator: Optional[DuplicatedV2] = None
    # data type: UnknownAdditionalData
    oneof_schema_9_validator: Optional[UnknownAdditionalData] = None
    # data type: OverlappedRangeAnnotation
    oneof_schema_10_validator: Optional[OverlappedRangeAnnotation] = None
    # data type: UnknownLabel
    oneof_schema_11_validator: Optional[UnknownLabel] = None
    actual_instance: Optional[
        Union[
            DuplicatedSegmentationV2,
            DuplicatedV1,
            DuplicatedV2,
            InvalidAnnotationData,
            InvalidChoice,
            InvalidLinkTarget,
            InvalidValue,
            OverlappedRangeAnnotation,
            UnknownAdditionalData,
            UnknownLabel,
            UnknownLinkTarget,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "DuplicatedSegmentationV2",
        "DuplicatedV1",
        "DuplicatedV2",
        "InvalidAnnotationData",
        "InvalidChoice",
        "InvalidLinkTarget",
        "InvalidValue",
        "OverlappedRangeAnnotation",
        "UnknownAdditionalData",
        "UnknownLabel",
        "UnknownLinkTarget",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = ValidationError.model_construct()
        error_messages = []
        match = 0
        # validate data type: InvalidAnnotationData
        if not isinstance(v, InvalidAnnotationData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InvalidAnnotationData`")
        else:
            match += 1
        # validate data type: DuplicatedSegmentationV2
        if not isinstance(v, DuplicatedSegmentationV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DuplicatedSegmentationV2`")
        else:
            match += 1
        # validate data type: InvalidValue
        if not isinstance(v, InvalidValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InvalidValue`")
        else:
            match += 1
        # validate data type: UnknownLinkTarget
        if not isinstance(v, UnknownLinkTarget):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnknownLinkTarget`")
        else:
            match += 1
        # validate data type: InvalidLinkTarget
        if not isinstance(v, InvalidLinkTarget):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InvalidLinkTarget`")
        else:
            match += 1
        # validate data type: InvalidChoice
        if not isinstance(v, InvalidChoice):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InvalidChoice`")
        else:
            match += 1
        # validate data type: DuplicatedV1
        if not isinstance(v, DuplicatedV1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DuplicatedV1`")
        else:
            match += 1
        # validate data type: DuplicatedV2
        if not isinstance(v, DuplicatedV2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DuplicatedV2`")
        else:
            match += 1
        # validate data type: UnknownAdditionalData
        if not isinstance(v, UnknownAdditionalData):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnknownAdditionalData`")
        else:
            match += 1
        # validate data type: OverlappedRangeAnnotation
        if not isinstance(v, OverlappedRangeAnnotation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OverlappedRangeAnnotation`")
        else:
            match += 1
        # validate data type: UnknownLabel
        if not isinstance(v, UnknownLabel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UnknownLabel`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in ValidationError with oneOf schemas: DuplicatedSegmentationV2, DuplicatedV1, DuplicatedV2, InvalidAnnotationData, InvalidChoice, InvalidLinkTarget, InvalidValue, OverlappedRangeAnnotation, UnknownAdditionalData, UnknownLabel, UnknownLinkTarget. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in ValidationError with oneOf schemas: DuplicatedSegmentationV2, DuplicatedV1, DuplicatedV2, InvalidAnnotationData, InvalidChoice, InvalidLinkTarget, InvalidValue, OverlappedRangeAnnotation, UnknownAdditionalData, UnknownLabel, UnknownLinkTarget. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InvalidAnnotationData
        try:
            instance.actual_instance = InvalidAnnotationData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DuplicatedSegmentationV2
        try:
            instance.actual_instance = DuplicatedSegmentationV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InvalidValue
        try:
            instance.actual_instance = InvalidValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnknownLinkTarget
        try:
            instance.actual_instance = UnknownLinkTarget.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InvalidLinkTarget
        try:
            instance.actual_instance = InvalidLinkTarget.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InvalidChoice
        try:
            instance.actual_instance = InvalidChoice.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DuplicatedV1
        try:
            instance.actual_instance = DuplicatedV1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DuplicatedV2
        try:
            instance.actual_instance = DuplicatedV2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnknownAdditionalData
        try:
            instance.actual_instance = UnknownAdditionalData.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OverlappedRangeAnnotation
        try:
            instance.actual_instance = OverlappedRangeAnnotation.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UnknownLabel
        try:
            instance.actual_instance = UnknownLabel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into ValidationError with oneOf schemas: DuplicatedSegmentationV2, DuplicatedV1, DuplicatedV2, InvalidAnnotationData, InvalidChoice, InvalidLinkTarget, InvalidValue, OverlappedRangeAnnotation, UnknownAdditionalData, UnknownLabel, UnknownLinkTarget. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into ValidationError with oneOf schemas: DuplicatedSegmentationV2, DuplicatedV1, DuplicatedV2, InvalidAnnotationData, InvalidChoice, InvalidLinkTarget, InvalidValue, OverlappedRangeAnnotation, UnknownAdditionalData, UnknownLabel, UnknownLinkTarget. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            DuplicatedSegmentationV2,
            DuplicatedV1,
            DuplicatedV2,
            InvalidAnnotationData,
            InvalidChoice,
            InvalidLinkTarget,
            InvalidValue,
            OverlappedRangeAnnotation,
            UnknownAdditionalData,
            UnknownLabel,
            UnknownLinkTarget,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
