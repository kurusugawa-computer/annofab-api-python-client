"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.annotation_type_field_value_annotation_editor_feature import AnnotationTypeFieldValueAnnotationEditorFeature
from annofabapi.pydantic_models.annotation_type_field_value_display_line_direction import AnnotationTypeFieldValueDisplayLineDirection
from annofabapi.pydantic_models.annotation_type_field_value_empty_field_value import AnnotationTypeFieldValueEmptyFieldValue
from annofabapi.pydantic_models.annotation_type_field_value_margin_of_error_tolerance import AnnotationTypeFieldValueMarginOfErrorTolerance
from annofabapi.pydantic_models.annotation_type_field_value_minimum_area2d import AnnotationTypeFieldValueMinimumArea2d
from annofabapi.pydantic_models.annotation_type_field_value_minimum_size import AnnotationTypeFieldValueMinimumSize
from annofabapi.pydantic_models.annotation_type_field_value_minimum_size2d_with_default_insert_position import (
    AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition,
)
from annofabapi.pydantic_models.annotation_type_field_value_one_boolean_field_value import AnnotationTypeFieldValueOneBooleanFieldValue
from annofabapi.pydantic_models.annotation_type_field_value_one_integer_field_value import AnnotationTypeFieldValueOneIntegerFieldValue
from annofabapi.pydantic_models.annotation_type_field_value_one_string_field_value import AnnotationTypeFieldValueOneStringFieldValue
from annofabapi.pydantic_models.annotation_type_field_value_vertex_count_min_max import AnnotationTypeFieldValueVertexCountMinMax

ANNOTATIONTYPEFIELDVALUE_ONE_OF_SCHEMAS = [
    "AnnotationTypeFieldValueAnnotationEditorFeature",
    "AnnotationTypeFieldValueDisplayLineDirection",
    "AnnotationTypeFieldValueEmptyFieldValue",
    "AnnotationTypeFieldValueMarginOfErrorTolerance",
    "AnnotationTypeFieldValueMinimumArea2d",
    "AnnotationTypeFieldValueMinimumSize",
    "AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition",
    "AnnotationTypeFieldValueOneBooleanFieldValue",
    "AnnotationTypeFieldValueOneIntegerFieldValue",
    "AnnotationTypeFieldValueOneStringFieldValue",
    "AnnotationTypeFieldValueVertexCountMinMax",
]


class AnnotationTypeFieldValue(BaseModel):
    """
    ユーザー定義アノテーション種別のフィールドに設定される値です。 アノテーション種別のフィールド定義と対応するフィールド値のみ登録を許可されます。
    """

    # data type: AnnotationTypeFieldValueMinimumSize
    oneof_schema_1_validator: Optional[AnnotationTypeFieldValueMinimumSize] = None
    # data type: AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition
    oneof_schema_2_validator: Optional[AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition] = None
    # data type: AnnotationTypeFieldValueMarginOfErrorTolerance
    oneof_schema_3_validator: Optional[AnnotationTypeFieldValueMarginOfErrorTolerance] = None
    # data type: AnnotationTypeFieldValueVertexCountMinMax
    oneof_schema_4_validator: Optional[AnnotationTypeFieldValueVertexCountMinMax] = None
    # data type: AnnotationTypeFieldValueMinimumArea2d
    oneof_schema_5_validator: Optional[AnnotationTypeFieldValueMinimumArea2d] = None
    # data type: AnnotationTypeFieldValueDisplayLineDirection
    oneof_schema_6_validator: Optional[AnnotationTypeFieldValueDisplayLineDirection] = None
    # data type: AnnotationTypeFieldValueAnnotationEditorFeature
    oneof_schema_7_validator: Optional[AnnotationTypeFieldValueAnnotationEditorFeature] = None
    # data type: AnnotationTypeFieldValueOneIntegerFieldValue
    oneof_schema_8_validator: Optional[AnnotationTypeFieldValueOneIntegerFieldValue] = None
    # data type: AnnotationTypeFieldValueOneStringFieldValue
    oneof_schema_9_validator: Optional[AnnotationTypeFieldValueOneStringFieldValue] = None
    # data type: AnnotationTypeFieldValueOneBooleanFieldValue
    oneof_schema_10_validator: Optional[AnnotationTypeFieldValueOneBooleanFieldValue] = None
    # data type: AnnotationTypeFieldValueEmptyFieldValue
    oneof_schema_11_validator: Optional[AnnotationTypeFieldValueEmptyFieldValue] = None
    actual_instance: Optional[
        Union[
            AnnotationTypeFieldValueAnnotationEditorFeature,
            AnnotationTypeFieldValueDisplayLineDirection,
            AnnotationTypeFieldValueEmptyFieldValue,
            AnnotationTypeFieldValueMarginOfErrorTolerance,
            AnnotationTypeFieldValueMinimumArea2d,
            AnnotationTypeFieldValueMinimumSize,
            AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition,
            AnnotationTypeFieldValueOneBooleanFieldValue,
            AnnotationTypeFieldValueOneIntegerFieldValue,
            AnnotationTypeFieldValueOneStringFieldValue,
            AnnotationTypeFieldValueVertexCountMinMax,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "AnnotationTypeFieldValueAnnotationEditorFeature",
        "AnnotationTypeFieldValueDisplayLineDirection",
        "AnnotationTypeFieldValueEmptyFieldValue",
        "AnnotationTypeFieldValueMarginOfErrorTolerance",
        "AnnotationTypeFieldValueMinimumArea2d",
        "AnnotationTypeFieldValueMinimumSize",
        "AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition",
        "AnnotationTypeFieldValueOneBooleanFieldValue",
        "AnnotationTypeFieldValueOneIntegerFieldValue",
        "AnnotationTypeFieldValueOneStringFieldValue",
        "AnnotationTypeFieldValueVertexCountMinMax",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = AnnotationTypeFieldValue.model_construct()
        error_messages = []
        match = 0
        # validate data type: AnnotationTypeFieldValueMinimumSize
        if not isinstance(v, AnnotationTypeFieldValueMinimumSize):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueMinimumSize`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition
        if not isinstance(v, AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueMarginOfErrorTolerance
        if not isinstance(v, AnnotationTypeFieldValueMarginOfErrorTolerance):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueMarginOfErrorTolerance`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueVertexCountMinMax
        if not isinstance(v, AnnotationTypeFieldValueVertexCountMinMax):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueVertexCountMinMax`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueMinimumArea2d
        if not isinstance(v, AnnotationTypeFieldValueMinimumArea2d):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueMinimumArea2d`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueDisplayLineDirection
        if not isinstance(v, AnnotationTypeFieldValueDisplayLineDirection):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueDisplayLineDirection`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueAnnotationEditorFeature
        if not isinstance(v, AnnotationTypeFieldValueAnnotationEditorFeature):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueAnnotationEditorFeature`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueOneIntegerFieldValue
        if not isinstance(v, AnnotationTypeFieldValueOneIntegerFieldValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueOneIntegerFieldValue`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueOneStringFieldValue
        if not isinstance(v, AnnotationTypeFieldValueOneStringFieldValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueOneStringFieldValue`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueOneBooleanFieldValue
        if not isinstance(v, AnnotationTypeFieldValueOneBooleanFieldValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueOneBooleanFieldValue`")
        else:
            match += 1
        # validate data type: AnnotationTypeFieldValueEmptyFieldValue
        if not isinstance(v, AnnotationTypeFieldValueEmptyFieldValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationTypeFieldValueEmptyFieldValue`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in AnnotationTypeFieldValue with oneOf schemas: AnnotationTypeFieldValueAnnotationEditorFeature, AnnotationTypeFieldValueDisplayLineDirection, AnnotationTypeFieldValueEmptyFieldValue, AnnotationTypeFieldValueMarginOfErrorTolerance, AnnotationTypeFieldValueMinimumArea2d, AnnotationTypeFieldValueMinimumSize, AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition, AnnotationTypeFieldValueOneBooleanFieldValue, AnnotationTypeFieldValueOneIntegerFieldValue, AnnotationTypeFieldValueOneStringFieldValue, AnnotationTypeFieldValueVertexCountMinMax. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in AnnotationTypeFieldValue with oneOf schemas: AnnotationTypeFieldValueAnnotationEditorFeature, AnnotationTypeFieldValueDisplayLineDirection, AnnotationTypeFieldValueEmptyFieldValue, AnnotationTypeFieldValueMarginOfErrorTolerance, AnnotationTypeFieldValueMinimumArea2d, AnnotationTypeFieldValueMinimumSize, AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition, AnnotationTypeFieldValueOneBooleanFieldValue, AnnotationTypeFieldValueOneIntegerFieldValue, AnnotationTypeFieldValueOneStringFieldValue, AnnotationTypeFieldValueVertexCountMinMax. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AnnotationTypeFieldValueMinimumSize
        try:
            instance.actual_instance = AnnotationTypeFieldValueMinimumSize.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition
        try:
            instance.actual_instance = AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueMarginOfErrorTolerance
        try:
            instance.actual_instance = AnnotationTypeFieldValueMarginOfErrorTolerance.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueVertexCountMinMax
        try:
            instance.actual_instance = AnnotationTypeFieldValueVertexCountMinMax.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueMinimumArea2d
        try:
            instance.actual_instance = AnnotationTypeFieldValueMinimumArea2d.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueDisplayLineDirection
        try:
            instance.actual_instance = AnnotationTypeFieldValueDisplayLineDirection.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueAnnotationEditorFeature
        try:
            instance.actual_instance = AnnotationTypeFieldValueAnnotationEditorFeature.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueOneIntegerFieldValue
        try:
            instance.actual_instance = AnnotationTypeFieldValueOneIntegerFieldValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueOneStringFieldValue
        try:
            instance.actual_instance = AnnotationTypeFieldValueOneStringFieldValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueOneBooleanFieldValue
        try:
            instance.actual_instance = AnnotationTypeFieldValueOneBooleanFieldValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationTypeFieldValueEmptyFieldValue
        try:
            instance.actual_instance = AnnotationTypeFieldValueEmptyFieldValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AnnotationTypeFieldValue with oneOf schemas: AnnotationTypeFieldValueAnnotationEditorFeature, AnnotationTypeFieldValueDisplayLineDirection, AnnotationTypeFieldValueEmptyFieldValue, AnnotationTypeFieldValueMarginOfErrorTolerance, AnnotationTypeFieldValueMinimumArea2d, AnnotationTypeFieldValueMinimumSize, AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition, AnnotationTypeFieldValueOneBooleanFieldValue, AnnotationTypeFieldValueOneIntegerFieldValue, AnnotationTypeFieldValueOneStringFieldValue, AnnotationTypeFieldValueVertexCountMinMax. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AnnotationTypeFieldValue with oneOf schemas: AnnotationTypeFieldValueAnnotationEditorFeature, AnnotationTypeFieldValueDisplayLineDirection, AnnotationTypeFieldValueEmptyFieldValue, AnnotationTypeFieldValueMarginOfErrorTolerance, AnnotationTypeFieldValueMinimumArea2d, AnnotationTypeFieldValueMinimumSize, AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition, AnnotationTypeFieldValueOneBooleanFieldValue, AnnotationTypeFieldValueOneIntegerFieldValue, AnnotationTypeFieldValueOneStringFieldValue, AnnotationTypeFieldValueVertexCountMinMax. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            AnnotationTypeFieldValueAnnotationEditorFeature,
            AnnotationTypeFieldValueDisplayLineDirection,
            AnnotationTypeFieldValueEmptyFieldValue,
            AnnotationTypeFieldValueMarginOfErrorTolerance,
            AnnotationTypeFieldValueMinimumArea2d,
            AnnotationTypeFieldValueMinimumSize,
            AnnotationTypeFieldValueMinimumSize2dWithDefaultInsertPosition,
            AnnotationTypeFieldValueOneBooleanFieldValue,
            AnnotationTypeFieldValueOneIntegerFieldValue,
            AnnotationTypeFieldValueOneStringFieldValue,
            AnnotationTypeFieldValueVertexCountMinMax,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
