"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.annotation_type import AnnotationType
from annofabapi.pydantic_models.input_data_type import InputDataType
from annofabapi.pydantic_models.organization_plugin_compatibility import OrganizationPluginCompatibility
from annofabapi.pydantic_models.user_defined_annotation_type_definition import UserDefinedAnnotationTypeDefinition


class PluginDetailExtendedAnnotationSpecs(BaseModel):
    """
    カスタムのアノテーション種別を作成するプラグインを表します。 なお、このプラグインが設定されているプロジェクトでは、ここで指定したアノテーション種別以外は使用できなくなります。
    """

    plugin_compatibility: Optional[OrganizationPluginCompatibility] = None
    annotation_types: List[AnnotationType] = Field(
        description="プラグインを使用したプロジェクトで選択可能なアノテーション種別のリストです。 同じ種別を重複して設定することはできません。 "
    )
    user_defined_annotation_type_definitions: Optional[Dict[str, UserDefinedAnnotationTypeDefinition]] = Field(
        default=None, description="Keyが[アノテーションの種類(AnnotationType)](#section/AnnotationType)であるDictionaryです。 "
    )
    compatible_input_data_types: List[InputDataType] = Field(
        description="プラグインが対応している入力データです。 プラグイン種別がカスタムアノテーションエディタ、またはカスタムアノテーション仕様の場合のみ有効です。 "
    )
    type: Optional[StrictStr] = Field(
        default=None, description="`ExtendedAnnotationSpecs` [詳しくはこちら](#section/API-Convention/API-_type) ", alias="_type"
    )
    __properties: ClassVar[List[str]] = [
        "plugin_compatibility",
        "annotation_types",
        "user_defined_annotation_type_definitions",
        "compatible_input_data_types",
        "_type",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PluginDetailExtendedAnnotationSpecs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of plugin_compatibility
        if self.plugin_compatibility:
            _dict["plugin_compatibility"] = self.plugin_compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in annotation_types (list)
        _items = []
        if self.annotation_types:
            for _item_annotation_types in self.annotation_types:
                if _item_annotation_types:
                    _items.append(_item_annotation_types.to_dict())
            _dict["annotation_types"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in user_defined_annotation_type_definitions (dict)
        _field_dict = {}
        if self.user_defined_annotation_type_definitions:
            for _key_user_defined_annotation_type_definitions in self.user_defined_annotation_type_definitions:
                if self.user_defined_annotation_type_definitions[_key_user_defined_annotation_type_definitions]:
                    _field_dict[_key_user_defined_annotation_type_definitions] = self.user_defined_annotation_type_definitions[
                        _key_user_defined_annotation_type_definitions
                    ].to_dict()
            _dict["user_defined_annotation_type_definitions"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PluginDetailExtendedAnnotationSpecs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "plugin_compatibility": OrganizationPluginCompatibility.from_dict(obj["plugin_compatibility"])
                if obj.get("plugin_compatibility") is not None
                else None,
                "annotation_types": [AnnotationType.from_dict(_item) for _item in obj["annotation_types"]]
                if obj.get("annotation_types") is not None
                else None,
                "user_defined_annotation_type_definitions": dict(
                    (_k, UserDefinedAnnotationTypeDefinition.from_dict(_v)) for _k, _v in obj["user_defined_annotation_type_definitions"].items()
                )
                if obj.get("user_defined_annotation_type_definitions") is not None
                else None,
                "compatible_input_data_types": obj.get("compatible_input_data_types"),
                "_type": obj.get("_type"),
            }
        )
        return _obj
