"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.inspection_data_custom import InspectionDataCustom
from annofabapi.pydantic_models.inspection_data_point import InspectionDataPoint
from annofabapi.pydantic_models.inspection_data_polyline import InspectionDataPolyline
from annofabapi.pydantic_models.inspection_data_time import InspectionDataTime

INSPECTIONDATA_ONE_OF_SCHEMAS = ["InspectionDataCustom", "InspectionDataPoint", "InspectionDataPolyline", "InspectionDataTime"]


class InspectionData(BaseModel):
    """
    ##### スレッドの先頭のコメントである（`parent_inspection_id` に値がない）場合  検査コメントの座標値や区間。  * `InspectionDataPoint`：点で検査コメントを付与したときの座標値 * `InspectionDataPolyline`：ポリラインで検査コメントを付与したときの座標値 * `InspectionDataTime`：検査コメントを付与した区間（動画プロジェクトの場合） * `InspectionDataCustom`：カスタム  ##### 返信コメントである（`parent_inspection_id` に値がある）場合  現在は使用しておらず、レスポンスに含まれる値は不定です。APIのレスポンスにこの値を含む場合でも、「スレッドの先頭のコメント」の値を利用してください。  リクエストボディに指定する場合は、スレッドの先頭のコメントと同じ値を指定します。
    """

    # data type: InspectionDataPoint
    oneof_schema_1_validator: Optional[InspectionDataPoint] = None
    # data type: InspectionDataPolyline
    oneof_schema_2_validator: Optional[InspectionDataPolyline] = None
    # data type: InspectionDataTime
    oneof_schema_3_validator: Optional[InspectionDataTime] = None
    # data type: InspectionDataCustom
    oneof_schema_4_validator: Optional[InspectionDataCustom] = None
    actual_instance: Optional[Union[InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime]] = None
    one_of_schemas: Set[str] = {"InspectionDataCustom", "InspectionDataPoint", "InspectionDataPolyline", "InspectionDataTime"}

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = InspectionData.model_construct()
        error_messages = []
        match = 0
        # validate data type: InspectionDataPoint
        if not isinstance(v, InspectionDataPoint):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InspectionDataPoint`")
        else:
            match += 1
        # validate data type: InspectionDataPolyline
        if not isinstance(v, InspectionDataPolyline):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InspectionDataPolyline`")
        else:
            match += 1
        # validate data type: InspectionDataTime
        if not isinstance(v, InspectionDataTime):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InspectionDataTime`")
        else:
            match += 1
        # validate data type: InspectionDataCustom
        if not isinstance(v, InspectionDataCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InspectionDataCustom`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in InspectionData with oneOf schemas: InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in InspectionData with oneOf schemas: InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InspectionDataPoint
        try:
            instance.actual_instance = InspectionDataPoint.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InspectionDataPolyline
        try:
            instance.actual_instance = InspectionDataPolyline.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InspectionDataTime
        try:
            instance.actual_instance = InspectionDataTime.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InspectionDataCustom
        try:
            instance.actual_instance = InspectionDataCustom.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into InspectionData with oneOf schemas: InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into InspectionData with oneOf schemas: InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], InspectionDataCustom, InspectionDataPoint, InspectionDataPolyline, InspectionDataTime]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
