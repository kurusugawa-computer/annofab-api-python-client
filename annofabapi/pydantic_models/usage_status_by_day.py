"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.editor_usage_timespan import EditorUsageTimespan


class UsageStatusByDay(BaseModel):
    """
    日ごとの利用状況
    """

    organization_id: StrictStr = Field(description="組織ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    var_date: str = Field(description="対象日。日付のフォーマットはISO 8601 拡張形式です。", alias="date")
    aggregation_period_from: str = Field(description="集計期間の開始日時。日時のフォーマットはISO 8601 拡張形式です。")
    aggregation_period_to: str = Field(description="集計期間の終了日時。日時のフォーマットはISO 8601 拡張形式です。")
    editor_usage: List[EditorUsageTimespan] = Field(description="エディタ利用時間のリスト")
    storage_usage: Union[StrictFloat, StrictInt] = Field(description="ストレージ利用量。単位はGB時")
    __properties: ClassVar[List[str]] = [
        "organization_id",
        "date",
        "aggregation_period_from",
        "aggregation_period_to",
        "editor_usage",
        "storage_usage",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageStatusByDay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in editor_usage (list)
        _items = []
        if self.editor_usage:
            for _item_editor_usage in self.editor_usage:
                if _item_editor_usage:
                    _items.append(_item_editor_usage.to_dict())
            _dict["editor_usage"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageStatusByDay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organization_id": obj.get("organization_id"),
                "date": obj.get("date"),
                "aggregation_period_from": obj.get("aggregation_period_from"),
                "aggregation_period_to": obj.get("aggregation_period_to"),
                "editor_usage": [EditorUsageTimespan.from_dict(_item) for _item in obj["editor_usage"]]
                if obj.get("editor_usage") is not None
                else None,
                "storage_usage": obj.get("storage_usage"),
            }
        )
        return _obj
