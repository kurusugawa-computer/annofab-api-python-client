"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from annofabapi.pydantic_models.worktime_statistics_item import WorktimeStatisticsItem


class WorktimeStatisticsData(BaseModel):
    """
    WorktimeStatisticsData
    """

    var_date: str = Field(description="日付", alias="date")
    grouped_by_input: List[WorktimeStatisticsItem] = Field(
        description="ユーザーごとの画像1個当たりの作業時間情報（動画プロジェクトの場合は空リスト）"
    )
    grouped_by_task: List[WorktimeStatisticsItem] = Field(
        description="ユーザーごとのタスク1個当たりの作業時間情報（動画プロジェクトの場合は空リスト）"
    )
    grouped_by_minute: List[WorktimeStatisticsItem] = Field(
        description="ユーザーごとの動画1分当たりの作業時間情報（画像プロジェクトの場合は空リスト）"
    )
    __properties: ClassVar[List[str]] = ["date", "grouped_by_input", "grouped_by_task", "grouped_by_minute"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorktimeStatisticsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grouped_by_input (list)
        _items = []
        if self.grouped_by_input:
            for _item_grouped_by_input in self.grouped_by_input:
                if _item_grouped_by_input:
                    _items.append(_item_grouped_by_input.to_dict())
            _dict["grouped_by_input"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grouped_by_task (list)
        _items = []
        if self.grouped_by_task:
            for _item_grouped_by_task in self.grouped_by_task:
                if _item_grouped_by_task:
                    _items.append(_item_grouped_by_task.to_dict())
            _dict["grouped_by_task"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grouped_by_minute (list)
        _items = []
        if self.grouped_by_minute:
            for _item_grouped_by_minute in self.grouped_by_minute:
                if _item_grouped_by_minute:
                    _items.append(_item_grouped_by_minute.to_dict())
            _dict["grouped_by_minute"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorktimeStatisticsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "date": obj.get("date"),
                "grouped_by_input": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["grouped_by_input"]]
                if obj.get("grouped_by_input") is not None
                else None,
                "grouped_by_task": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["grouped_by_task"]]
                if obj.get("grouped_by_task") is not None
                else None,
                "grouped_by_minute": [WorktimeStatisticsItem.from_dict(_item) for _item in obj["grouped_by_minute"]]
                if obj.get("grouped_by_minute") is not None
                else None,
            }
        )
        return _obj
