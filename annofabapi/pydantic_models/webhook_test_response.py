"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class WebhookTestResponse(BaseModel):
    """
    WebhookTestResponse
    """

    result: StrictStr = Field(
        description="* success: 通知先から正常なレスポンス（2xx系）を受け取った * failure: 通知先からエラーレスポンス（2xx系以外）を受け取った * error: リクエスト送信に失敗した、もしくはレスポンスを受信できなかった "
    )
    request_body: Optional[StrictStr] = Field(default=None, description="実際に送信されたリクエストボディ")
    response_status: Optional[StrictInt] = Field(default=None, description="通知先から返されたHTTPステータスコード")
    response_body: Optional[StrictStr] = Field(default=None, description="通知先から返されたレスポンスボディ")
    message: Optional[StrictStr] = Field(default=None, description='result="error" 時のエラー内容等')
    __properties: ClassVar[List[str]] = ["result", "request_body", "response_status", "response_body", "message"]

    @field_validator("result")
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["success", "failure", "error"]):
            raise ValueError("must be one of enum values ('success', 'failure', 'error')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "result": obj.get("result"),
                "request_body": obj.get("request_body"),
                "response_status": obj.get("response_status"),
                "response_body": obj.get("response_body"),
                "message": obj.get("message"),
            }
        )
        return _obj
