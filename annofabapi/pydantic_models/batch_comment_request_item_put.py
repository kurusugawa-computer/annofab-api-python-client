"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self

from annofabapi.pydantic_models.comment_node import CommentNode
from annofabapi.pydantic_models.task_phase import TaskPhase


class BatchCommentRequestItemPut(BaseModel):
    """
    コメント更新
    """

    comment_id: StrictStr = Field(description="コメントのID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    phase: TaskPhase
    phase_stage: Annotated[int, Field(strict=True, ge=1)] = Field(description="コメントを作成したときのフェーズのステージ。")
    account_id: StrictStr = Field(description="アカウントID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    comment_type: StrictStr = Field(
        description="コメントの種別。次の値が指定できます。  * `onhold` - 保留コメントとして扱われます。 * `inspection` - 検査コメントとして扱われます。  返信コメント作成時は返信先コメントの `comment_type` と同じ値を指定してください。  コメント更新時は更新前コメントと同じ値を指定してください（変更はできません）。 "
    )
    phrases: Optional[List[StrictStr]] = Field(
        default=None, description="`comment_type` の値によって指定可能な値が異なります。  * `onhold` の場合   * 使用しません（空配列 or 指定なし） "
    )
    comment: StrictStr = Field(description="コメント本文。 ")
    comment_node: CommentNode
    datetime_for_sorting: Optional[str] = Field(
        default=None,
        description="コメントのソート順を決める日時。コメント作成時のみ指定可能です。  Annofab標準エディタでは、コメントはここで指定した日時にしたがってスレッドごとに昇順で表示されます。  コメント作成時に未指定とした場合は、作成操作オブジェクトの順序に応じてコメント作成日時からずれた時刻が自動設定されます（ソート順を一意とするため）。  なお、この値は後から更新することはできません（値を指定しても無視されます）。 ",
    )
    type: StrictStr = Field(description="`Put`  [詳しくはこちら](#section/API-Convention/API-_type) ", alias="_type")
    __properties: ClassVar[List[str]] = [
        "comment_id",
        "phase",
        "phase_stage",
        "account_id",
        "comment_type",
        "phrases",
        "comment",
        "comment_node",
        "datetime_for_sorting",
        "_type",
    ]

    @field_validator("comment_type")
    def comment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["onhold", "inspection"]):
            raise ValueError("must be one of enum values ('onhold', 'inspection')")
        return value

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["Put"]):
            raise ValueError("must be one of enum values ('Put')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchCommentRequestItemPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comment_node
        if self.comment_node:
            _dict["comment_node"] = self.comment_node.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchCommentRequestItemPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "comment_id": obj.get("comment_id"),
                "phase": obj.get("phase"),
                "phase_stage": obj.get("phase_stage") if obj.get("phase_stage") is not None else 1,
                "account_id": obj.get("account_id"),
                "comment_type": obj.get("comment_type"),
                "phrases": obj.get("phrases"),
                "comment": obj.get("comment"),
                "comment_node": CommentNode.from_dict(obj["comment_node"]) if obj.get("comment_node") is not None else None,
                "datetime_for_sorting": obj.get("datetime_for_sorting"),
                "_type": obj.get("_type"),
            }
        )
        return _obj
