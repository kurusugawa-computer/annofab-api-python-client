"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from annofabapi.pydantic_models.supplementary_data_type import SupplementaryDataType


class SupplementaryData(BaseModel):
    """
    SupplementaryData
    """

    organization_id: StrictStr = Field(description="組織ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    input_data_set_id: StrictStr = Field(description="入力データセットID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    project_id: StrictStr = Field(description="プロジェクトID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    input_data_id: StrictStr = Field(description="入力データID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    supplementary_data_id: StrictStr = Field(description="補助情報ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    supplementary_data_name: StrictStr = Field(description="補助情報の名前")
    supplementary_data_path: StrictStr = Field(
        description="補助情報の実体が存在するURLです。 URLスキームが s3 もしくは https であるもののみをサポートしています。 "
    )
    url: StrictStr = Field(description="システム内部用のプロパティ")
    etag: Optional[StrictStr] = Field(
        default=None, description="[HTTPレスポンスヘッダー ETag](https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/ETag)に相当する値です。 "
    )
    supplementary_data_type: SupplementaryDataType
    supplementary_data_number: Annotated[int, Field(strict=True, ge=0)] = Field(description="補助情報の表示順を表す数値。")
    updated_datetime: str = Field(description="更新日時")
    __properties: ClassVar[List[str]] = [
        "organization_id",
        "input_data_set_id",
        "project_id",
        "input_data_id",
        "supplementary_data_id",
        "supplementary_data_name",
        "supplementary_data_path",
        "url",
        "etag",
        "supplementary_data_type",
        "supplementary_data_number",
        "updated_datetime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupplementaryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupplementaryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "organization_id": obj.get("organization_id"),
                "input_data_set_id": obj.get("input_data_set_id"),
                "project_id": obj.get("project_id"),
                "input_data_id": obj.get("input_data_id"),
                "supplementary_data_id": obj.get("supplementary_data_id"),
                "supplementary_data_name": obj.get("supplementary_data_name"),
                "supplementary_data_path": obj.get("supplementary_data_path"),
                "url": obj.get("url"),
                "etag": obj.get("etag"),
                "supplementary_data_type": obj.get("supplementary_data_type"),
                "supplementary_data_number": obj.get("supplementary_data_number"),
                "updated_datetime": obj.get("updated_datetime"),
            }
        )
        return _obj
