"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.annotation_detail_v2_create import AnnotationDetailV2Create
from annofabapi.pydantic_models.annotation_detail_v2_import import AnnotationDetailV2Import
from annofabapi.pydantic_models.annotation_detail_v2_update import AnnotationDetailV2Update

ANNOTATIONDETAILV2INPUT_ONE_OF_SCHEMAS = ["AnnotationDetailV2Create", "AnnotationDetailV2Import", "AnnotationDetailV2Update"]


class AnnotationDetailV2Input(BaseModel):
    """
    - **AnnotationDetailV2Create**   - 新規にアノテーションを作成する場合にこの型を利用します。 - **AnnotationDetailV2Import**   - 過去にAnnofab内外で作成したアノテーションをそのままインポートする場合にこの型を利用します。 - **AnnotationDetailV2Update**   - 既に存在するアノテーションを更新する場合にこの型を利用します
    """

    # data type: AnnotationDetailV2Create
    oneof_schema_1_validator: Optional[AnnotationDetailV2Create] = None
    # data type: AnnotationDetailV2Import
    oneof_schema_2_validator: Optional[AnnotationDetailV2Import] = None
    # data type: AnnotationDetailV2Update
    oneof_schema_3_validator: Optional[AnnotationDetailV2Update] = None
    actual_instance: Optional[Union[AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update]] = None
    one_of_schemas: Set[str] = {"AnnotationDetailV2Create", "AnnotationDetailV2Import", "AnnotationDetailV2Update"}

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = AnnotationDetailV2Input.model_construct()
        error_messages = []
        match = 0
        # validate data type: AnnotationDetailV2Create
        if not isinstance(v, AnnotationDetailV2Create):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationDetailV2Create`")
        else:
            match += 1
        # validate data type: AnnotationDetailV2Import
        if not isinstance(v, AnnotationDetailV2Import):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationDetailV2Import`")
        else:
            match += 1
        # validate data type: AnnotationDetailV2Update
        if not isinstance(v, AnnotationDetailV2Update):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AnnotationDetailV2Update`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in AnnotationDetailV2Input with oneOf schemas: AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in AnnotationDetailV2Input with oneOf schemas: AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AnnotationDetailV2Create
        try:
            instance.actual_instance = AnnotationDetailV2Create.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationDetailV2Import
        try:
            instance.actual_instance = AnnotationDetailV2Import.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AnnotationDetailV2Update
        try:
            instance.actual_instance = AnnotationDetailV2Update.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AnnotationDetailV2Input with oneOf schemas: AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AnnotationDetailV2Input with oneOf schemas: AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AnnotationDetailV2Create, AnnotationDetailV2Import, AnnotationDetailV2Update]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
