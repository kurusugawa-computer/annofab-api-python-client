"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.oidc_attribute_mapping import OidcAttributeMapping
from annofabapi.pydantic_models.oidc_endpoints import OidcEndpoints


class OrganizationOidcIdp(BaseModel):
    """
    組織が利用する外部IDプロバイダー設定
    """

    id: StrictStr = Field(description="組織IDプロバイダーのID。[値の制約についてはこちら。](#section/API-Convention/APIID)")
    organization_name: StrictStr = Field(description="組織名。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    client_id: StrictStr = Field(description="外部IDプロバイダーで指定されたクライアントID")
    client_secret: StrictStr = Field(description="外部IDプロバイダーで指定されたクライアントシークレット")
    attributes_request_method: StrictStr = Field(description="ユーザー属性を取得する際に利用するリクエストメソッド ")
    endpoints: OidcEndpoints
    attribute_mapping: OidcAttributeMapping
    sign_up_url: StrictStr = Field(description="組織IDプロバイダーを用いたユーザ登録時、ユーザがアクセスすべきURL ")
    created_datetime: str = Field(description="IDプロバイダー設定の作成日時")
    updated_datetime: str = Field(description="IDプロバイダー設定の更新日時")
    __properties: ClassVar[List[str]] = [
        "id",
        "organization_name",
        "client_id",
        "client_secret",
        "attributes_request_method",
        "endpoints",
        "attribute_mapping",
        "sign_up_url",
        "created_datetime",
        "updated_datetime",
    ]

    @field_validator("attributes_request_method")
    def attributes_request_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["GET", "POST"]):
            raise ValueError("must be one of enum values ('GET', 'POST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationOidcIdp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of endpoints
        if self.endpoints:
            _dict["endpoints"] = self.endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of attribute_mapping
        if self.attribute_mapping:
            _dict["attribute_mapping"] = self.attribute_mapping.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationOidcIdp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "organization_name": obj.get("organization_name"),
                "client_id": obj.get("client_id"),
                "client_secret": obj.get("client_secret"),
                "attributes_request_method": obj.get("attributes_request_method"),
                "endpoints": OidcEndpoints.from_dict(obj["endpoints"]) if obj.get("endpoints") is not None else None,
                "attribute_mapping": OidcAttributeMapping.from_dict(obj["attribute_mapping"]) if obj.get("attribute_mapping") is not None else None,
                "sign_up_url": obj.get("sign_up_url"),
                "created_datetime": obj.get("created_datetime"),
                "updated_datetime": obj.get("updated_datetime"),
            }
        )
        return _obj
