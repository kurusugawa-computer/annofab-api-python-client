"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.additional_data_default_type import AdditionalDataDefaultType
from annofabapi.pydantic_models.additional_data_definition_type import AdditionalDataDefinitionType
from annofabapi.pydantic_models.additional_data_definition_v1_choices_inner import AdditionalDataDefinitionV1ChoicesInner
from annofabapi.pydantic_models.internationalization_message import InternationalizationMessage
from annofabapi.pydantic_models.keybind import Keybind


class AdditionalDataDefinitionV1(BaseModel):
    """
    AdditionalDataDefinitionV1
    """

    additional_data_definition_id: StrictStr = Field(description="属性ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    read_only: Optional[StrictBool] = Field(default=False, description="読み込み専用")
    name: Optional[InternationalizationMessage] = None
    default: Optional[AdditionalDataDefaultType] = None
    keybind: Optional[List[Keybind]] = Field(default=None, description="ショートカットキー")
    type: AdditionalDataDefinitionType
    choices: Optional[List[AdditionalDataDefinitionV1ChoicesInner]] = Field(default=None, description="ドロップダウンまたはラジオボタンの選択肢")
    regex: Optional[StrictStr] = Field(default=None, description="属性の値が、指定した正規表現に一致している必要があります。")
    label_ids: Optional[List[StrictStr]] = Field(default=None, description="リンク属性において、リンク先として指定可能なラベルID（空の場合制限なし）")
    required: Optional[StrictBool] = Field(default=None, description="リンク属性において、入力を必須とするかどうか")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="ユーザーが自由に登録できるkey-value型のメタデータです。 ")
    __properties: ClassVar[List[str]] = [
        "additional_data_definition_id",
        "read_only",
        "name",
        "default",
        "keybind",
        "type",
        "choices",
        "regex",
        "label_ids",
        "required",
        "metadata",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdditionalDataDefinitionV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict["name"] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict["default"] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in keybind (list)
        _items = []
        if self.keybind:
            for _item_keybind in self.keybind:
                if _item_keybind:
                    _items.append(_item_keybind.to_dict())
            _dict["keybind"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in choices (list)
        _items = []
        if self.choices:
            for _item_choices in self.choices:
                if _item_choices:
                    _items.append(_item_choices.to_dict())
            _dict["choices"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdditionalDataDefinitionV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "additional_data_definition_id": obj.get("additional_data_definition_id"),
                "read_only": obj.get("read_only") if obj.get("read_only") is not None else False,
                "name": InternationalizationMessage.from_dict(obj["name"]) if obj.get("name") is not None else None,
                "default": AdditionalDataDefaultType.from_dict(obj["default"]) if obj.get("default") is not None else None,
                "keybind": [Keybind.from_dict(_item) for _item in obj["keybind"]] if obj.get("keybind") is not None else None,
                "type": obj.get("type"),
                "choices": [AdditionalDataDefinitionV1ChoicesInner.from_dict(_item) for _item in obj["choices"]]
                if obj.get("choices") is not None
                else None,
                "regex": obj.get("regex"),
                "label_ids": obj.get("label_ids"),
                "required": obj.get("required"),
                "metadata": obj.get("metadata"),
            }
        )
        return _obj
