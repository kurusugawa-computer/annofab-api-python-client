"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.internationalization_message import InternationalizationMessage
from annofabapi.pydantic_models.project_extra_data_kind_scope import ProjectExtraDataKindScope


class ProjectExtraDataKind(BaseModel):
    """
    プロジェクトの追加データの種別。
    """

    id: StrictStr = Field(description="プロジェクト追加データの種別ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    display_name: InternationalizationMessage
    var_schema: Dict[str, Any] = Field(description="プロジェクト追加データのスキーマを表す構造。", alias="schema")
    scope: ProjectExtraDataKindScope
    default_value: Optional[Any] = Field(default=None, description="プロジェクト追加データの値。 nullを除く任意のJson")
    __properties: ClassVar[List[str]] = ["id", "display_name", "schema", "scope", "default_value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectExtraDataKind from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_name
        if self.display_name:
            _dict["display_name"] = self.display_name.to_dict()
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict["default_value"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectExtraDataKind from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "display_name": InternationalizationMessage.from_dict(obj["display_name"]) if obj.get("display_name") is not None else None,
                "schema": obj.get("schema"),
                "scope": obj.get("scope"),
                "default_value": obj.get("default_value"),
            }
        )
        return _obj
