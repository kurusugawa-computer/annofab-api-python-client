"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
from typing import Any, Dict, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, ValidationError, field_validator
from typing_extensions import Self

from annofabapi.pydantic_models.additional_data_restriction_condition_can_input import AdditionalDataRestrictionConditionCanInput
from annofabapi.pydantic_models.additional_data_restriction_condition_equals import AdditionalDataRestrictionConditionEquals
from annofabapi.pydantic_models.additional_data_restriction_condition_has_label import AdditionalDataRestrictionConditionHasLabel
from annofabapi.pydantic_models.additional_data_restriction_condition_matches import AdditionalDataRestrictionConditionMatches
from annofabapi.pydantic_models.additional_data_restriction_condition_not_equals import AdditionalDataRestrictionConditionNotEquals
from annofabapi.pydantic_models.additional_data_restriction_condition_not_matches import AdditionalDataRestrictionConditionNotMatches

ADDITIONALDATARESTRICTIONCONDITION_ONE_OF_SCHEMAS = [
    "AdditionalDataRestrictionConditionCanInput",
    "AdditionalDataRestrictionConditionEquals",
    "AdditionalDataRestrictionConditionHasLabel",
    "AdditionalDataRestrictionConditionImply",
    "AdditionalDataRestrictionConditionMatches",
    "AdditionalDataRestrictionConditionNotEquals",
    "AdditionalDataRestrictionConditionNotMatches",
]


class AdditionalDataRestrictionCondition(BaseModel):
    """
    属性の制約    * `AdditionalDataRestrictionConditionCanInput`: 属性値の入力を許可するかどうか   * `AdditionalDataRestrictionConditionEquals`: 指定した値に等しい   * `AdditionalDataRestrictionConditionNotEquals`: 指定した値に等しくない   * `AdditionalDataRestrictionConditionMatches`: 指定した正規表現に一致する   * `AdditionalDataRestrictionConditionNotMatches`: 指定した正規表現に一致しない   * `AdditionalDataRestrictionConditionHasLabel`: 指定したラベルIDに一致する（アノテーションリンク属性限定）   * `AdditionalDataRestrictionConditionImply`: 指定した前提条件を満たすときのみ、制約を満たすかどうか  以下のJSONは、「属性IDが`attr2`の属性値が`true`ならば、属性IDが`attr1`の属性値は`choice1`である」という制約を表しています。  ``` {     \"additional_data_definition_id\": \"attr1\",     \"condition\": {         \"_type\": \"Imply\",         \"premise\": {             \"additional_data_definition_id\": \"attr2\",             \"condition\": {                 \"_type\": \"Equals\",                 \"value\": \"true\"             }         },         \"condition\": {             \"_type\": \"Equals\",             \"value\": \"choice1\"         }     } } ```
    """

    # data type: AdditionalDataRestrictionConditionCanInput
    oneof_schema_1_validator: Optional[AdditionalDataRestrictionConditionCanInput] = None
    # data type: AdditionalDataRestrictionConditionEquals
    oneof_schema_2_validator: Optional[AdditionalDataRestrictionConditionEquals] = None
    # data type: AdditionalDataRestrictionConditionNotEquals
    oneof_schema_3_validator: Optional[AdditionalDataRestrictionConditionNotEquals] = None
    # data type: AdditionalDataRestrictionConditionMatches
    oneof_schema_4_validator: Optional[AdditionalDataRestrictionConditionMatches] = None
    # data type: AdditionalDataRestrictionConditionNotMatches
    oneof_schema_5_validator: Optional[AdditionalDataRestrictionConditionNotMatches] = None
    # data type: AdditionalDataRestrictionConditionHasLabel
    oneof_schema_6_validator: Optional[AdditionalDataRestrictionConditionHasLabel] = None
    # data type: AdditionalDataRestrictionConditionImply
    oneof_schema_7_validator: Optional[AdditionalDataRestrictionConditionImply] = None
    actual_instance: Optional[
        Union[
            AdditionalDataRestrictionConditionCanInput,
            AdditionalDataRestrictionConditionEquals,
            AdditionalDataRestrictionConditionHasLabel,
            AdditionalDataRestrictionConditionImply,
            AdditionalDataRestrictionConditionMatches,
            AdditionalDataRestrictionConditionNotEquals,
            AdditionalDataRestrictionConditionNotMatches,
        ]
    ] = None
    one_of_schemas: Set[str] = {
        "AdditionalDataRestrictionConditionCanInput",
        "AdditionalDataRestrictionConditionEquals",
        "AdditionalDataRestrictionConditionHasLabel",
        "AdditionalDataRestrictionConditionImply",
        "AdditionalDataRestrictionConditionMatches",
        "AdditionalDataRestrictionConditionNotEquals",
        "AdditionalDataRestrictionConditionNotMatches",
    }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )

    discriminator_value_class_map: Dict[str, str] = {}

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator("actual_instance")
    def actual_instance_must_validate_oneof(cls, v):
        instance = AdditionalDataRestrictionCondition.model_construct()
        error_messages = []
        match = 0
        # validate data type: AdditionalDataRestrictionConditionCanInput
        if not isinstance(v, AdditionalDataRestrictionConditionCanInput):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionCanInput`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionEquals
        if not isinstance(v, AdditionalDataRestrictionConditionEquals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionEquals`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionNotEquals
        if not isinstance(v, AdditionalDataRestrictionConditionNotEquals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionNotEquals`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionMatches
        if not isinstance(v, AdditionalDataRestrictionConditionMatches):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionMatches`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionNotMatches
        if not isinstance(v, AdditionalDataRestrictionConditionNotMatches):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionNotMatches`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionHasLabel
        if not isinstance(v, AdditionalDataRestrictionConditionHasLabel):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionHasLabel`")
        else:
            match += 1
        # validate data type: AdditionalDataRestrictionConditionImply
        if not isinstance(v, AdditionalDataRestrictionConditionImply):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdditionalDataRestrictionConditionImply`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in AdditionalDataRestrictionCondition with oneOf schemas: AdditionalDataRestrictionConditionCanInput, AdditionalDataRestrictionConditionEquals, AdditionalDataRestrictionConditionHasLabel, AdditionalDataRestrictionConditionImply, AdditionalDataRestrictionConditionMatches, AdditionalDataRestrictionConditionNotEquals, AdditionalDataRestrictionConditionNotMatches. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in AdditionalDataRestrictionCondition with oneOf schemas: AdditionalDataRestrictionConditionCanInput, AdditionalDataRestrictionConditionEquals, AdditionalDataRestrictionConditionHasLabel, AdditionalDataRestrictionConditionImply, AdditionalDataRestrictionConditionMatches, AdditionalDataRestrictionConditionNotEquals, AdditionalDataRestrictionConditionNotMatches. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AdditionalDataRestrictionConditionCanInput
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionCanInput.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionEquals
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionEquals.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionNotEquals
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionNotEquals.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionMatches
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionMatches.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionNotMatches
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionNotMatches.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionHasLabel
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionHasLabel.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdditionalDataRestrictionConditionImply
        try:
            instance.actual_instance = AdditionalDataRestrictionConditionImply.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into AdditionalDataRestrictionCondition with oneOf schemas: AdditionalDataRestrictionConditionCanInput, AdditionalDataRestrictionConditionEquals, AdditionalDataRestrictionConditionHasLabel, AdditionalDataRestrictionConditionImply, AdditionalDataRestrictionConditionMatches, AdditionalDataRestrictionConditionNotEquals, AdditionalDataRestrictionConditionNotMatches. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into AdditionalDataRestrictionCondition with oneOf schemas: AdditionalDataRestrictionConditionCanInput, AdditionalDataRestrictionConditionEquals, AdditionalDataRestrictionConditionHasLabel, AdditionalDataRestrictionConditionImply, AdditionalDataRestrictionConditionMatches, AdditionalDataRestrictionConditionNotEquals, AdditionalDataRestrictionConditionNotMatches. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(
        self,
    ) -> Optional[
        Union[
            Dict[str, Any],
            AdditionalDataRestrictionConditionCanInput,
            AdditionalDataRestrictionConditionEquals,
            AdditionalDataRestrictionConditionHasLabel,
            AdditionalDataRestrictionConditionImply,
            AdditionalDataRestrictionConditionMatches,
            AdditionalDataRestrictionConditionNotEquals,
            AdditionalDataRestrictionConditionNotMatches,
        ]
    ]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


from annofabapi.pydantic_models.additional_data_restriction_condition_imply import AdditionalDataRestrictionConditionImply

# TODO: Rewrite to not use raise_errors
AdditionalDataRestrictionCondition.model_rebuild(raise_errors=False)
