"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from annofabapi.pydantic_models.annotation_thumbnail_detail import AnnotationThumbnailDetail
from annofabapi.pydantic_models.annotation_thumbnail_image import AnnotationThumbnailImage


class AnnotationThumbnail(BaseModel):
    """
    アノテーションのサムネイル情報
    """

    project_id: StrictStr = Field(description="プロジェクトID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    task_id: StrictStr = Field(description="タスクID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    input_data_id: StrictStr = Field(description="入力データID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    images: List[AnnotationThumbnailImage] = Field(description="サムネイル画像情報の一覧")
    annotations: Dict[str, AnnotationThumbnailDetail] = Field(description="アノテーションIDをキーとしたサムネイル情報")
    annotation_updated_datetime: Optional[str] = Field(
        default=None, description="サムネイルの元になったアノテーションの更新日時。サムネイルが未作成の場合はnull。"
    )
    created_datetime: Optional[str] = Field(default=None, description="サムネイル登録日時。サムネイルが未作成の場合はnull。")
    __properties: ClassVar[List[str]] = [
        "project_id",
        "task_id",
        "input_data_id",
        "images",
        "annotations",
        "annotation_updated_datetime",
        "created_datetime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationThumbnail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict["images"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in annotations (dict)
        _field_dict = {}
        if self.annotations:
            for _key_annotations in self.annotations:
                if self.annotations[_key_annotations]:
                    _field_dict[_key_annotations] = self.annotations[_key_annotations].to_dict()
            _dict["annotations"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationThumbnail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "project_id": obj.get("project_id"),
                "task_id": obj.get("task_id"),
                "input_data_id": obj.get("input_data_id"),
                "images": [AnnotationThumbnailImage.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
                "annotations": dict((_k, AnnotationThumbnailDetail.from_dict(_v)) for _k, _v in obj["annotations"].items())
                if obj.get("annotations") is not None
                else None,
                "annotation_updated_datetime": obj.get("annotation_updated_datetime"),
                "created_datetime": obj.get("created_datetime"),
            }
        )
        return _obj
