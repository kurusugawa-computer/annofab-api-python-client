"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from annofabapi.pydantic_models.inspection_data import InspectionData
from annofabapi.pydantic_models.inspection_status import InspectionStatus
from annofabapi.pydantic_models.task_phase import TaskPhase


class Inspection(BaseModel):
    """
    検査コメント
    """

    project_id: StrictStr = Field(description="プロジェクトID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    task_id: StrictStr = Field(description="タスクID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    input_data_id: StrictStr = Field(description="入力データID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    inspection_id: StrictStr = Field(description="検査ID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    phase: TaskPhase
    phase_stage: Annotated[int, Field(strict=True, ge=1)] = Field(description="検査コメントを付与したときのフェーズのステージ")
    commenter_account_id: StrictStr = Field(description="アカウントID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    annotation_id: Optional[StrictStr] = Field(
        default=None,
        description="アノテーションID。[値の制約についてはこちら。](#section/API-Convention/APIID)  `annotation_type`が`classification`の場合は label_id と同じ値が格納されます。 ",
    )
    label_id: Optional[StrictStr] = Field(default=None, description="ラベルID。[値の制約についてはこちら。](#section/API-Convention/APIID) ")
    data: InspectionData
    parent_inspection_id: Optional[StrictStr] = Field(
        default=None, description="検査ID。[値の制約についてはこちら。](#section/API-Convention/APIID) "
    )
    phrases: Optional[List[StrictStr]] = Field(default=None, description="参照している定型指摘のID。")
    comment: StrictStr = Field(description="検査コメントの中身 ")
    status: InspectionStatus
    created_datetime: str
    updated_datetime: Optional[str] = None
    __properties: ClassVar[List[str]] = [
        "project_id",
        "task_id",
        "input_data_id",
        "inspection_id",
        "phase",
        "phase_stage",
        "commenter_account_id",
        "annotation_id",
        "label_id",
        "data",
        "parent_inspection_id",
        "phrases",
        "comment",
        "status",
        "created_datetime",
        "updated_datetime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Inspection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict["data"] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Inspection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "project_id": obj.get("project_id"),
                "task_id": obj.get("task_id"),
                "input_data_id": obj.get("input_data_id"),
                "inspection_id": obj.get("inspection_id"),
                "phase": obj.get("phase"),
                "phase_stage": obj.get("phase_stage") if obj.get("phase_stage") is not None else 1,
                "commenter_account_id": obj.get("commenter_account_id"),
                "annotation_id": obj.get("annotation_id"),
                "label_id": obj.get("label_id"),
                "data": InspectionData.from_dict(obj["data"]) if obj.get("data") is not None else None,
                "parent_inspection_id": obj.get("parent_inspection_id"),
                "phrases": obj.get("phrases"),
                "comment": obj.get("comment"),
                "status": obj.get("status"),
                "created_datetime": obj.get("created_datetime"),
                "updated_datetime": obj.get("updated_datetime"),
            }
        )
        return _obj
