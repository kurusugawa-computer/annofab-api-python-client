"""


No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Self


class AnnotationEditorFeature(BaseModel):
    """
    塗りつぶしの作図機能に関する情報
    """

    append: StrictBool = Field(description="塗りつぶしの「追記」機能が使えるか否か")
    erase: StrictBool = Field(description="塗りつぶしの「消しゴム」機能が使えるか否か")
    freehand: StrictBool = Field(description="塗りつぶしの「フリーハンド」機能が使えるか否か")
    rectangle_fill: StrictBool = Field(description="塗りつぶしの「矩形」機能が使えるか否か")
    polygon_fill: StrictBool = Field(description="塗りつぶしの「自由形状」機能が使えるか否か")
    fill_near: StrictBool = Field(description="「近似色塗りつぶし」機能を有効にするかどうか")
    __properties: ClassVar[List[str]] = ["append", "erase", "freehand", "rectangle_fill", "polygon_fill", "fill_near"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationEditorFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationEditorFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "append": obj.get("append"),
                "erase": obj.get("erase"),
                "freehand": obj.get("freehand"),
                "rectangle_fill": obj.get("rectangle_fill"),
                "polygon_fill": obj.get("polygon_fill"),
                "fill_near": obj.get("fill_near"),
            }
        )
        return _obj
